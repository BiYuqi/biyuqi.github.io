<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>LoadingMore</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://loadingmore.com/"/>
  <updated>2017-11-18T11:21:40.000Z</updated>
  <id>http://loadingmore.com/</id>
  
  <author>
    <name>LoaingMore</name>
    <email>biyuqiwan@163.com</email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Js上传图片本地预览几种姿势</title>
    <link href="http://loadingmore.com/2017/11/18/Js%E4%B8%8A%E4%BC%A0%E5%9B%BE%E7%89%87%E6%9C%AC%E5%9C%B0%E9%A2%84%E8%A7%88%E5%87%A0%E7%A7%8D%E5%A7%BF%E5%8A%BF/"/>
    <id>http://loadingmore.com/2017/11/18/Js上传图片本地预览几种姿势/</id>
    <published>2017-11-18T09:00:12.000Z</published>
    <updated>2017-11-18T11:21:40.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>本主要总结前端开发中图片上传预览的几个方法 <strong> FileReader </strong> 和 <strong> URL.createObjectURL() </strong></p>
</blockquote>
<h2 id="FileReader"><a href="#FileReader" class="headerlink" title="FileReader"></a>FileReader</h2><p>1.什么是filereader？</p>
<p>FileReader 对象允许Web应用程序异步读取存储在用户计算机上的文件（或原始数据缓冲区）的内容，使用 File 或 Blob 对象指定要读取的文件或数据。 —MDN</p>
<p>看下怎么利用它来简单的实现一个图片预览<br><figure class="highlight html"><table><tr><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"file"</span> <span class="attr">id</span>=<span class="string">"input"</span>&gt;</span></div></pre></td></tr></table></figure></p>
<figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line">*   @param &#123;dom&#125; StringOrObject input元素</div><div class="line">*   @param &#123;fn&#125; Function 回调函数 返回bs64 file</div><div class="line">*/</div><div class="line"></div><div class="line"><span class="keyword">const</span> imagePreview = <span class="function"><span class="keyword">function</span>(<span class="params">dom,fn</span>)</span>&#123;</div><div class="line">    <span class="keyword">if</span>(<span class="keyword">typeof</span> dom === <span class="string">'string'</span>)&#123;</div><div class="line">        dom = <span class="built_in">document</span>.querySelector(dom)</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">const</span> bindEv = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">        <span class="comment">// 这里默认单图上传</span></div><div class="line">        <span class="keyword">const</span> file = <span class="keyword">this</span>.files[<span class="number">0</span>]</div><div class="line">        <span class="keyword">const</span> reader = <span class="keyword">new</span> FileReader()</div><div class="line">        reader.onload = <span class="function"><span class="keyword">function</span>(<span class="params">ev</span>)</span>&#123;</div><div class="line">            <span class="keyword">const</span> bs64 = ev.target.result</div><div class="line">            fn &amp;&amp; fn(bs64,file)</div><div class="line">        &#125;</div><div class="line">        reader.readAsDataURL(file)</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    dom.addEventListener(<span class="string">'change'</span>,bindEv,<span class="literal">false</span>)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="code"><pre><div class="line">imagePreview(<span class="string">'#input'</span>,<span class="function"><span class="keyword">function</span>(<span class="params">src,file</span>)</span>&#123;</div><div class="line">    <span class="comment">// src 就是base64图片 可进行预览操作</span></div><div class="line">    <span class="comment">//.file 为文件 可在此处进行上传操作</span></div><div class="line">    <span class="keyword">const</span> img = <span class="built_in">document</span>.createElement(<span class="string">'img'</span>)</div><div class="line">    img.src = src</div><div class="line">    <span class="built_in">document</span>.body.appendChild(img)</div><div class="line">    <span class="built_in">console</span>.log(src)</div><div class="line">    <span class="built_in">console</span>.log(file)</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<p><strong> readAsDataURL: </strong><br>开始读取指定的Blob对象或File对象中的内容. 当读取操作完成时,readyState属性的值会成为DONE,如果设置了onloadend事件处理程序,则调用之.同时,result属性中将包含一个data: URL格式的字符串以表示所读取文件的内容.<br>使用方法</p>
<h2 id="FileReader的问题"><a href="#FileReader的问题" class="headerlink" title="FileReader的问题"></a>FileReader的问题</h2><ul>
<li>兼容性</li>
<li>一些安卓5.0系统以下的bug</li>
</ul>
<p><strong> 兼容后面再解决，先着重解决下第二个问题 </strong><br><img src="http://oq4hkch8e.bkt.clouddn.com/bs64-filereader-bug-fix.png" alt=""><br><figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line">*   正常的图片应该是</div><div class="line">*   data:image/gif;data:image/png;;data:image/jpeg;data:image/x-icon;</div><div class="line">*   而在Android的一些5.0系统以下(如4.0)的设备中,</div><div class="line">*   有些返回的b64字符串缺少关键image/gif标识,所以需要手动加上</div><div class="line">*/</div><div class="line"></div><div class="line"><span class="keyword">const</span> imagePreview = <span class="function"><span class="keyword">function</span>(<span class="params">dom,fn</span>)</span>&#123;</div><div class="line">    <span class="keyword">if</span>(<span class="keyword">typeof</span> dom === <span class="string">'string'</span>)&#123;</div><div class="line">        dom = <span class="built_in">document</span>.querySelector(dom)</div><div class="line">    &#125;</div><div class="line">    <span class="comment">// 增加一个类型判断函数</span></div><div class="line">    <span class="keyword">const</span> isType = <span class="function"><span class="keyword">function</span>(<span class="params">name,type</span>)</span>&#123;</div><div class="line">        <span class="keyword">return</span> name.indexOf(type) &gt; <span class="number">-1</span></div><div class="line">    &#125;</div><div class="line">    <span class="keyword">const</span> bindEv = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">        <span class="comment">// 这里默认单图上传</span></div><div class="line">        <span class="keyword">const</span> file = <span class="keyword">this</span>.files[<span class="number">0</span>]</div><div class="line">        <span class="keyword">const</span> reader = <span class="keyword">new</span> FileReader()</div><div class="line">        reader.onload = <span class="function"><span class="keyword">function</span>(<span class="params">ev</span>)</span>&#123;</div><div class="line">            <span class="keyword">let</span> bs64 = ev.target.result</div><div class="line">            <span class="keyword">if</span>(bs64 &amp;&amp; bs64.indexOf(<span class="string">'data:base64,'</span>) &gt; <span class="number">-1</span>)&#123;</div><div class="line">                <span class="comment">// 去除旧有的错误头部</span></div><div class="line">                bs64 = bs64.replace(<span class="regexp">/data:base64,/</span>,<span class="string">''</span>)</div><div class="line">                <span class="comment">// 声明一个空字符用来保存下面判断的类型</span></div><div class="line">                <span class="comment">// 通过name后缀进行识别标注</span></div><div class="line">                <span class="keyword">let</span> typeFile = <span class="string">''</span>,</div><div class="line">                    name = file.name.toLowerCase();</div><div class="line">                <span class="keyword">if</span>(name &amp;&amp; isType(name,<span class="string">'.png'</span>))&#123;</div><div class="line">                    typeFile = <span class="string">'image/png;'</span></div><div class="line">                &#125;</div><div class="line">                <span class="keyword">if</span>(name &amp;&amp; isType(name,<span class="string">'.jpg'</span>))&#123;</div><div class="line">                    typeFile = <span class="string">'image/jpeg;'</span></div><div class="line">                &#125;</div><div class="line">                <span class="keyword">if</span>(name &amp;&amp; isType(name,<span class="string">'.gif'</span>))&#123;</div><div class="line">                    typeFile = <span class="string">'image/gif;'</span></div><div class="line">                &#125;</div><div class="line">                <span class="keyword">if</span>(name &amp;&amp; isType(name,<span class="string">'.icon'</span>))&#123;</div><div class="line">                    typeFile = <span class="string">'image/x-icon;'</span></div><div class="line">                &#125;</div><div class="line">                bs64 = <span class="string">'data:'</span>+typeFile+<span class="string">'base64,'</span>+bs64</div><div class="line">            &#125;</div><div class="line">            fn &amp;&amp; fn(bs64,file)</div><div class="line">        &#125;</div><div class="line">        reader.readAsDataURL(file)</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    dom.addEventListener(<span class="string">'change'</span>,bindEv,<span class="literal">false</span>)</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<table>
<thead>
<tr>
<th>Firefox</th>
<th>Chrome</th>
<th>Internet Explorer*</th>
<th>Opera</th>
<th>Safari</th>
</tr>
</thead>
<tbody>
<tr>
<td>3.6</td>
<td>7</td>
<td>10</td>
<td>未实现</td>
<td>未实现</td>
</tr>
</tbody>
</table>
<p>下面我们来看下另一种方法</p>
<h2 id="URL-createObjectURL"><a href="#URL-createObjectURL" class="headerlink" title="URL.createObjectURL()"></a>URL.createObjectURL()</h2><figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="comment">// 语法:</span></div><div class="line"><span class="comment">// 参数：blob</span></div><div class="line"><span class="comment">// 是用来创建 URL 的 File 对象或者 Blob 对象​</span></div><div class="line">objectURL = URL.createObjectURL(blob);</div></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="keyword">const</span> imagePreview = <span class="function"><span class="keyword">function</span>(<span class="params">dom,fn</span>)</span>&#123;</div><div class="line">    <span class="keyword">if</span>(<span class="keyword">typeof</span> dom === <span class="string">'string'</span>)&#123;</div><div class="line">        dom = <span class="built_in">document</span>.querySelector(dom)</div><div class="line">    &#125;</div><div class="line">    <span class="built_in">window</span>.URL = <span class="built_in">window</span>.URL || <span class="built_in">window</span>.webkitURL</div><div class="line">    <span class="keyword">const</span> bindEv = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">        <span class="keyword">const</span> file = <span class="keyword">this</span>.files[<span class="number">0</span>]</div><div class="line">        <span class="keyword">const</span> bs64 = <span class="built_in">window</span>.URL.createObjectURL(file)</div><div class="line">        <span class="keyword">const</span> img = <span class="built_in">document</span>.createElement(<span class="string">"img"</span>)</div><div class="line">        img.src = bs64</div><div class="line">        img.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">            <span class="built_in">window</span>.URL.remokeObjectURL(<span class="keyword">this</span>.src)</div><div class="line">        &#125;</div><div class="line">        fn &amp;&amp; fn(bs64, file)</div><div class="line">    &#125;</div><div class="line">    dom.addEventListener(<span class="string">'change'</span>,bindEv,<span class="literal">false</span>)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="code"><pre><div class="line">imagePreview(<span class="string">'#input'</span>,<span class="function"><span class="keyword">function</span>(<span class="params">src,file</span>)</span>&#123;</div><div class="line">    <span class="comment">// src 就是blog对象 可进行预览操作</span></div><div class="line">    <span class="comment">// blob:null/6436b315-7d42-46e7-b447-a1a982048e61</span></div><div class="line">    <span class="comment">//.file 为文件 可在此处进行上传操作</span></div><div class="line">    <span class="keyword">const</span> img = <span class="built_in">document</span>.createElement(<span class="string">'img'</span>)</div><div class="line">    img.src = src</div><div class="line">    <span class="built_in">document</span>.body.appendChild(img)</div><div class="line">    <span class="built_in">console</span>.log(src)</div><div class="line">    <span class="built_in">console</span>.log(file)</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<table>
<thead>
<tr>
<th>Firefox</th>
<th>Chrome</th>
<th>Internet Explorer*</th>
<th>Opera</th>
<th>Safari(WebKit)</th>
</tr>
</thead>
<tbody>
<tr>
<td>3.6</td>
<td>7</td>
<td>10</td>
<td>15</td>
<td>6 [1]</td>
</tr>
</tbody>
</table>
<p>[1] 通过 webkitURL 前缀对象实现。</p>
<p>在每次调用 createObjectURL() 方法时，都会创建一个新的 URL 对象，即使你已经用相同的对象作为参数创建过。当不再需要这些 URL 对象时，每个对象必须通过调用 URL.revokeObjectURL() 方法来释放。浏览器会在文档退出的时候自动释放它们，但是为了获得最佳性能和内存使用状况，你应该在安全的时机主动释放掉它们</p>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p>1.<a href="https://www.cnblogs.com/saysmy/p/5626337.html" target="_blank" rel="external">图片引用</a><br>2.<a href="https://developer.mozilla.org/zh-CN/docs/Web/API/FileReader" target="_blank" rel="external">MDN-FileReader</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;本主要总结前端开发中图片上传预览的几个方法 &lt;strong&gt; FileReader &lt;/strong&gt; 和 &lt;strong&gt; URL.createObjectURL() &lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;Fil
    
    </summary>
    
      <category term="Javascript" scheme="http://loadingmore.com/categories/Javascript/"/>
    
    
      <category term="javascript" scheme="http://loadingmore.com/tags/javascript/"/>
    
      <category term="fileReader" scheme="http://loadingmore.com/tags/fileReader/"/>
    
      <category term="createObjectURL" scheme="http://loadingmore.com/tags/createObjectURL/"/>
    
  </entry>
  
  <entry>
    <title>实现一个移动端字母索引导航</title>
    <link href="http://loadingmore.com/2017/10/22/%E5%AE%9E%E7%8E%B0%E4%B8%80%E4%B8%AA%E7%A7%BB%E5%8A%A8%E7%AB%AF%E5%AD%97%E6%AF%8D%E5%AF%BC%E8%88%AA%E7%B4%A2%E5%BC%95/"/>
    <id>http://loadingmore.com/2017/10/22/实现一个移动端字母导航索引/</id>
    <published>2017-10-22T10:20:12.000Z</published>
    <updated>2017-10-22T10:48:03.000Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a>
<blockquote>
<p>索引导航栏的效果在很多 APP 中都有应用,之前接触移动端页面开发较少，所以是边学边做，也就把这个过程中的一些东西整理记录下来。…</p>
</blockquote>
<h2 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h2><p><a href="http://loadingmore.com/demo/src/html/index-slidebar/index-slidebar.html">DEMO,浏览器请打开移动端调试查看具体效果</a><br><img src="http://oq4hkch8e.bkt.clouddn.com/slideindex.gif" alt=""><br><a href="https://github.com/BiYuqi/demo/blob/master/src/html/index-slidebar/index-slidebar.html" target="_blank" rel="external">GITHUB代码</a></p>
<h2 id="实现逻辑"><a href="#实现逻辑" class="headerlink" title="实现逻辑"></a>实现逻辑</h2><p>主要分为三个步骤</p>
<ul>
<li>渲染字母表</li>
<li>渲染页面数据</li>
<li>实现touch事件<br><img src="http://oq4hkch8e.bkt.clouddn.com/indexslide-code.png" alt=""></li>
</ul>
<h2 id="解释几个函数"><a href="#解释几个函数" class="headerlink" title="解释几个函数"></a>解释几个函数</h2><p>解释下moveTo2这个函数,主要目的就是根据touch事件返回的字母，与页面进行匹配，匹配成功后，用window.scrollTo指定跳转位置，<br><figure class="highlight js"><table><tr><td class="code"><pre><div class="line">moveTo2(letter) &#123;</div><div class="line">    <span class="keyword">const</span> len = <span class="keyword">this</span>.concatList.length</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i=<span class="number">0</span>;i&lt;len;i++)&#123;</div><div class="line">        <span class="comment">// 匹配成功 即表示存在</span></div><div class="line">        <span class="keyword">if</span>(<span class="keyword">this</span>.concatList[i].getAttribute(<span class="string">'data-char'</span>) === letter)&#123;</div><div class="line">            <span class="comment">// this.concatList[i].offsetTop-this.offsetTop</span></div><div class="line">            <span class="comment">// 减去this.offsetTop 是为了减去header的高度，达到预期高度</span></div><div class="line">            <span class="built_in">window</span>.scrollTo(<span class="number">0</span>,<span class="keyword">this</span>.concatList[i].offsetTop-<span class="keyword">this</span>.offsetTop)</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>此方法可返回touch时 所对应的索引是哪个字符,原理就是 this.letterWrap.clientHeight是字母列高度，除以字母数量得到是每个字母的高占比，再用当前touchY去除，得到当前位置的所占比例，取整即可得到当前索引<br><figure class="highlight js"><table><tr><td class="code"><pre><div class="line">getIndex(touchY) &#123;</div><div class="line">    <span class="comment">// 可返回对应的模块索引</span></div><div class="line">    <span class="keyword">return</span> <span class="built_in">Math</span>.floor((touchY-<span class="keyword">this</span>.offsetTop) / (<span class="keyword">this</span>.letterWrap.clientHeight / <span class="keyword">this</span>.source.length))</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>touch事件，其中e.preventDefault()是为了阻止scroll事件<br><figure class="highlight js"><table><tr><td class="code"><pre><div class="line">touchStart() &#123;</div><div class="line">    <span class="keyword">this</span>.letterWrap.addEventListener(<span class="string">'touchstart'</span>,(e)=&gt;&#123;</div><div class="line">        <span class="keyword">if</span>(!<span class="keyword">this</span>.touching)&#123;</div><div class="line">            e.preventDefault()</div><div class="line">            <span class="keyword">this</span>.touching = <span class="literal">true</span></div><div class="line">            <span class="keyword">this</span>.letterWrap.className += <span class="string">' active'</span></div><div class="line">            <span class="keyword">const</span> touchY = e.touches[<span class="number">0</span>].clientY</div><div class="line">            <span class="keyword">const</span> index = <span class="keyword">this</span>.getIndex(touchY)</div><div class="line">            <span class="keyword">this</span>.showTips(index)</div><div class="line">            <span class="keyword">this</span>.moveTo2(<span class="keyword">this</span>.source[index])</div><div class="line">        &#125;</div><div class="line">    &#125;,<span class="literal">false</span>)</div><div class="line">&#125;</div><div class="line"></div><div class="line">touchMove() &#123;</div><div class="line">    <span class="keyword">this</span>.letterWrap.addEventListener(<span class="string">'touchmove'</span>,(e)=&gt;&#123;</div><div class="line">        <span class="keyword">if</span>(<span class="keyword">this</span>.touching)&#123;</div><div class="line">            e.preventDefault()</div><div class="line">            <span class="keyword">const</span> touchY = e.touches[<span class="number">0</span>].clientY</div><div class="line">            <span class="keyword">const</span> index = <span class="keyword">this</span>.getIndex(touchY)</div><div class="line">            <span class="keyword">this</span>.showTips(index)</div><div class="line">            <span class="keyword">this</span>.moveTo2(<span class="keyword">this</span>.source[index])</div><div class="line">        &#125;</div><div class="line"></div><div class="line">    &#125;,<span class="literal">false</span>)</div><div class="line">&#125;</div><div class="line"></div><div class="line">touchEnd() &#123;</div><div class="line">    <span class="keyword">this</span>.letterWrap.addEventListener(<span class="string">'touchend'</span>,()=&gt;&#123;</div><div class="line">        <span class="keyword">if</span>(<span class="keyword">this</span>.touching)&#123;</div><div class="line">            <span class="keyword">this</span>.touching = <span class="literal">false</span></div><div class="line">            <span class="keyword">this</span>.letterWrap.className = <span class="keyword">this</span>.letterWrap.className.replace(<span class="regexp">/\s*active/</span>,<span class="string">''</span>)</div><div class="line">            <span class="keyword">this</span>.hideTips()</div><div class="line">        &#125;</div><div class="line"></div><div class="line">    &#125;,<span class="literal">false</span>)</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>至此，基本功能已经实现，可以根据不同的需求进行改进，后期打算封装成为一个类库，对外暴露接口，这样更灵活些</p>
]]></content>
    
    <summary type="html">
    
      &lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;blockquote&gt;
&lt;p&gt;索引导航栏的效果在很多 APP 中都有应用,之前接触移动端页面开发较少，所以是边学边做，也就把这个过程中的一些东西整理记录下来。…&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;效果&quot;&gt;&lt;a href=&quot;#
    
    </summary>
    
      <category term="Javascript" scheme="http://loadingmore.com/categories/Javascript/"/>
    
    
      <category term="Javascript" scheme="http://loadingmore.com/tags/Javascript/"/>
    
      <category term="ES6" scheme="http://loadingmore.com/tags/ES6/"/>
    
  </entry>
  
  <entry>
    <title>写Vue回到顶部组件遇到的一些问题</title>
    <link href="http://loadingmore.com/2017/10/15/vue%E5%86%99%E5%9B%9E%E5%88%B0%E9%A1%B6%E9%83%A8%E7%BB%84%E4%BB%B6%E9%81%87%E5%88%B0%E7%9A%84%E4%B8%80%E4%BA%9B%E9%97%AE%E9%A2%98/"/>
    <id>http://loadingmore.com/2017/10/15/vue写回到顶部组件遇到的一些问题/</id>
    <published>2017-10-15T04:13:12.000Z</published>
    <updated>2017-10-15T06:24:39.000Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a>
<blockquote>
<p>人的懒惰是有惯性的，写博客也是一旦停下来就会一直懒下去，相反一旦坚持下来，也会有惯性，所以我要开始更文啦…</p>
</blockquote>
<h2 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h2><p><img src="http://oq4hkch8e.bkt.clouddn.com/backTop.gif" alt=""></p>
<h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><h3 id="1-谷歌浏览器下document-body-scrollTop失效"><a href="#1-谷歌浏览器下document-body-scrollTop失效" class="headerlink" title="1.谷歌浏览器下document.body.scrollTop失效"></a>1.谷歌浏览器下document.body.scrollTop失效</h3><p>经查阅此版本(版本为61)后的均需要使用document.documentElement.scrollTop来替代</p>
<h3 id="2-vue怎么监听滚动事件"><a href="#2-vue怎么监听滚动事件" class="headerlink" title="2.vue怎么监听滚动事件"></a>2.vue怎么监听滚动事件</h3><figure class="highlight html"><table><tr><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"back-top"</span> @<span class="attr">click</span>=<span class="string">"goTop"</span> <span class="attr">name</span>=<span class="string">"button"</span> <span class="attr">v-show</span>=<span class="string">"visible"</span> <span class="attr">:style</span>=<span class="string">"customStyle"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">svg</span> <span class="attr">width</span>=<span class="string">"16"</span> <span class="attr">height</span>=<span class="string">"16"</span> <span class="attr">viewBox</span>=<span class="string">"0 0 17 17"</span> <span class="attr">xmlns</span>=<span class="string">"http://www.w3.org/2000/svg"</span> <span class="attr">class</span>=<span class="string">"back-icon"</span> <span class="attr">aria-hidden</span>=<span class="string">"true"</span> <span class="attr">style</span>=<span class="string">"height: 16px; width: 16px;"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">g</span>&gt;</span></div><div class="line">          <span class="tag">&lt;<span class="name">path</span> <span class="attr">d</span>=<span class="string">"M12.036 15.59c0 .55-.453.995-.997.995H5.032c-.55 0-.997-.445-.997-.996V8.584H1.03c-1.1 0-1.36-.633-.578-1.416L7.33.29c.39-.39 1.026-.385 1.412 0l6.878 6.88c.782.78.523 1.415-.58 1.415h-3.004v7.004z"</span> <span class="attr">fill-rule</span>=<span class="string">"evenodd"</span>&gt;</span><span class="tag">&lt;/<span class="name">path</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">g</span>&gt;</span></div><div class="line">      <span class="tag">&lt;/<span class="name">svg</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</div><div class="line">    <span class="attr">props</span>:&#123;</div><div class="line">        <span class="attr">visibleHeight</span>: &#123; <span class="comment">// 按钮出现条件</span></div><div class="line">            type: <span class="built_in">Number</span>,</div><div class="line">            <span class="attr">default</span>: <span class="number">400</span></div><div class="line">        &#125;,</div><div class="line">        <span class="attr">rate</span>: &#123;</div><div class="line">            <span class="attr">type</span>: <span class="built_in">Number</span>, <span class="comment">// 滚动速率</span></div><div class="line">            <span class="keyword">default</span>: <span class="number">4</span></div><div class="line">        &#125;,</div><div class="line">        <span class="attr">customStyle</span>: &#123; <span class="comment">// 默认样式</span></div><div class="line">            type: <span class="built_in">Object</span>,</div><div class="line">            <span class="keyword">default</span>() &#123;  <span class="comment">// 此处由于是Object 所以要返回一个函数</span></div><div class="line">                <span class="keyword">return</span> &#123;</div><div class="line">                    <span class="attr">right</span>: <span class="string">'50px'</span>,</div><div class="line">                    <span class="attr">bottom</span>: <span class="string">'50px'</span>,</div><div class="line">                    <span class="attr">width</span>: <span class="string">'40px'</span>,</div><div class="line">                    <span class="attr">height</span>: <span class="string">'40px'</span>,</div><div class="line">                    <span class="string">'border-radius'</span>: <span class="string">'4px'</span>,</div><div class="line">                    <span class="string">'line-height'</span>: <span class="string">'45px'</span>,</div><div class="line">                    <span class="attr">background</span>: <span class="string">'#e7eaf1'</span></div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;,</div><div class="line">    data() &#123;</div><div class="line">        <span class="keyword">return</span> &#123;</div><div class="line">            <span class="attr">scrollTop</span>: <span class="string">''</span>,</div><div class="line">            <span class="attr">visible</span>: <span class="literal">false</span>, <span class="comment">// 是否显示</span></div><div class="line">            interval: <span class="literal">null</span>  <span class="comment">// 定时器</span></div><div class="line"></div><div class="line">        &#125;</div><div class="line">    &#125;,</div><div class="line">    mounted() &#123;</div><div class="line">        <span class="comment">// Dom加载完毕时监听scroll事件</span></div><div class="line">        <span class="built_in">window</span>.addEventListener(<span class="string">'scroll'</span>, <span class="keyword">this</span>.handleScroll)</div><div class="line">    &#125;,</div><div class="line">    beforeDestroy() &#123;</div><div class="line">        <span class="built_in">window</span>.removeEventListener(<span class="string">'scroll'</span>, <span class="keyword">this</span>.handleScroll)</div><div class="line">            <span class="keyword">if</span> (<span class="keyword">this</span>.interval) &#123;</div><div class="line">                clearInterval(<span class="keyword">this</span>.interval)</div><div class="line">            &#125;</div><div class="line">    &#125;,</div><div class="line">    <span class="attr">methods</span>:&#123;</div><div class="line">        handleScroll() &#123;</div><div class="line">            <span class="comment">// 判断条件</span></div><div class="line">            <span class="keyword">this</span>.visible = <span class="built_in">window</span>.pageYOffset &gt; <span class="keyword">this</span>.visibleHeight</div><div class="line">            <span class="keyword">this</span>.scrollTop = <span class="built_in">window</span>.pageYOffset</div><div class="line">        &#125;,</div><div class="line">        goTop(e) &#123;</div><div class="line">            <span class="keyword">this</span>.interval = setInterval(<span class="function"><span class="params">()</span>=&gt;</span>&#123;</div><div class="line">                <span class="keyword">this</span>.scrollTop = <span class="keyword">this</span>.scrollTop + (-<span class="keyword">this</span>.scrollTop)/<span class="keyword">this</span>.rate</div><div class="line">                <span class="built_in">window</span>.scrollTo(<span class="number">0</span>,<span class="keyword">this</span>.scrollTop)</div><div class="line">                <span class="keyword">if</span>(<span class="keyword">this</span>.scrollTop &lt;= <span class="number">0</span>)&#123;</div><div class="line">                    <span class="built_in">window</span>.scrollTo(<span class="number">0</span>,<span class="number">0</span>)</div><div class="line">                    clearInterval(<span class="keyword">this</span>.interval)</div><div class="line">                &#125;</div><div class="line">            &#125;,<span class="number">13</span>)</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="3-window-scrollTo-x-y-是什么鬼"><a href="#3-window-scrollTo-x-y-是什么鬼" class="headerlink" title="3.window.scrollTo(x,y)是什么鬼"></a>3.window.scrollTo(x,y)是什么鬼</h3><p>此方法为滚动到文档中的某个坐标，x 是文档中的横轴坐标。y 是文档中的纵轴坐标。<br>该函数实际上和 window.scroll是一样的<br><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Window/scrollTo" target="_blank" rel="external">具体请看MDM介绍</a></p>
<h2 id="缓动动画算法"><a href="#缓动动画算法" class="headerlink" title="缓动动画算法"></a>缓动动画算法</h2><p>之前看过张鑫旭大神写过这个方法，所以本文就直接拿来用了，具体算法是<br><img src="http://oq4hkch8e.bkt.clouddn.com/js-animate.png" alt=""><br><figure class="highlight js"><table><tr><td class="code"><pre><div class="line">A = A + (B - A) / <span class="number">2</span></div><div class="line"></div><div class="line">我下一秒的位置 = 现在位置 + 现在和初始之间距离的一半</div></pre></td></tr></table></figure></p>
<h2 id="参考算法："><a href="#参考算法：" class="headerlink" title="参考算法："></a>参考算法：</h2><p><a href="http://www.zhangxinxu.com/wordpress/2017/01/share-a-animation-algorithm-js/" target="_blank" rel="external">张鑫旭-分享一个即插即用的私藏缓动动画JS小算法</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;blockquote&gt;
&lt;p&gt;人的懒惰是有惯性的，写博客也是一旦停下来就会一直懒下去，相反一旦坚持下来，也会有惯性，所以我要开始更文啦…&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;效果&quot;&gt;&lt;a href=&quot;#效果&quot; class=&quot;h
    
    </summary>
    
      <category term="Javascript" scheme="http://loadingmore.com/categories/Javascript/"/>
    
    
      <category term="Vue" scheme="http://loadingmore.com/tags/Vue/"/>
    
      <category term="Javascript" scheme="http://loadingmore.com/tags/Javascript/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript获取CSS样式遇到的一些问题</title>
    <link href="http://loadingmore.com/2017/09/25/%E5%8E%9F%E7%94%9FJavaScript%E8%8E%B7%E5%8F%96CSS%E6%A0%B7%E5%BC%8F%E9%81%87%E5%88%B0%E7%9A%84%E4%B8%80%E4%BA%9B%E9%97%AE%E9%A2%98/"/>
    <id>http://loadingmore.com/2017/09/25/原生JavaScript获取CSS样式遇到的一些问题/</id>
    <published>2017-09-25T12:09:48.000Z</published>
    <updated>2017-10-26T12:45:59.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>最近在写一个效果需要获取一个元素translateX的值，因为没有采用JQ,所以用原生方法</p>
</blockquote>
<h2 id="获取不到样式"><a href="#获取不到样式" class="headerlink" title="获取不到样式"></a>获取不到样式</h2><figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="keyword">const</span> res = <span class="built_in">document</span>.querySelector(<span class="string">'.target'</span>).style.width</div><div class="line"></div><div class="line"><span class="built_in">console</span>.log(res) <span class="comment">// 结果为空</span></div></pre></td></tr></table></figure>
<p>郁闷啊。。。<br>突然想到之前看高程的时候看到过getComputedStyle这个方法，于是MDN了一下<a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Window/getComputedStyle" target="_blank" rel="external">这里</a></p>
<figure class="highlight js"><table><tr><td class="code"><pre><div class="line">style                  <span class="comment">//只能获取元素的内联样式，内部样式和外部样式使用style是获取不到的。</span></div><div class="line">currentStyle         <span class="comment">//适用于IE8及以下。</span></div><div class="line">getComputedStyle     <span class="comment">//同currentStyle作用相同，但是适用于FF、opera、safari、chrome IE9+。</span></div></pre></td></tr></table></figure>
<h2 id="getComputedStyle"><a href="#getComputedStyle" class="headerlink" title="getComputedStyle"></a>getComputedStyle</h2><p>getComputedStyle 是一个可以获取当前元素所有最终使用的CSS属性值。返回的是一个CSS样式声明对象([object CSSStyleDeclaration])，只读</p>
<p>语法：<br><figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="keyword">let</span> style = <span class="built_in">window</span>.getComputedStyle(element, [pseudoElt]);</div><div class="line"></div><div class="line"><span class="comment">// 用于获取计算样式的Element</span></div><div class="line"><span class="comment">// pseudoElt 可选 指定一个要匹配的伪元素的字符串</span></div></pre></td></tr></table></figure></p>
<h2 id="兼容性写法"><a href="#兼容性写法" class="headerlink" title="兼容性写法"></a>兼容性写法</h2><figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="keyword">const</span> getStyle = <span class="function"><span class="keyword">function</span>(<span class="params">obj,attr</span>)</span>&#123;</div><div class="line">    <span class="keyword">return</span> obj.currentStyle ? obj.currentStyle[attr] : <span class="built_in">window</span>.getComputedStyle($(obj))[attr]</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="Javascript获取transform中的属性值"><a href="#Javascript获取transform中的属性值" class="headerlink" title="Javascript获取transform中的属性值"></a>Javascript获取transform中的属性值</h2><figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="keyword">const</span> $ = <span class="function"><span class="keyword">function</span>(<span class="params">el</span>)</span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="built_in">document</span>.querySelector(el)</div><div class="line">&#125;</div><div class="line"><span class="keyword">const</span> getStyle = <span class="function"><span class="keyword">function</span>(<span class="params">obj,attr</span>)</span>&#123;</div><div class="line">    <span class="keyword">return</span> obj.currentStyle ? obj.currentStyle[attr] : <span class="built_in">window</span>.getComputedStyle(obj)[attr]</div><div class="line">&#125;</div><div class="line"><span class="keyword">const</span> getTransform = <span class="function"><span class="keyword">function</span>(<span class="params">data</span>)</span>&#123;</div><div class="line">    <span class="keyword">const</span> reg = <span class="regexp">/matrix\((.*)\)/</span></div><div class="line">    <span class="keyword">const</span> result = reg.exec(data)[<span class="number">1</span>].split(<span class="string">','</span>)</div><div class="line">    <span class="keyword">return</span> &#123;</div><div class="line">        <span class="attr">transX</span>: <span class="built_in">parseInt</span>(result[result.length<span class="number">-2</span>]),</div><div class="line">        <span class="attr">transY</span>: <span class="built_in">parseInt</span>(result[result.length<span class="number">-1</span>])</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">getTransform(getStyle($(<span class="string">'.box'</span>),<span class="string">'transform'</span>))</div><div class="line"><span class="comment">// &#123;transX: -4, transY: -8&#125;</span></div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;最近在写一个效果需要获取一个元素translateX的值，因为没有采用JQ,所以用原生方法&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;获取不到样式&quot;&gt;&lt;a href=&quot;#获取不到样式&quot; class=&quot;headerlink&quot; title=&quot;
    
    </summary>
    
    
      <category term="Javascript" scheme="http://loadingmore.com/tags/Javascript/"/>
    
      <category term="CSS" scheme="http://loadingmore.com/tags/CSS/"/>
    
  </entry>
  
  <entry>
    <title>Jquery操作select下拉框值</title>
    <link href="http://loadingmore.com/2017/08/16/Jquery%E6%93%8D%E4%BD%9Cselect%E4%B8%8B%E6%8B%89%E6%A1%86%E5%80%BC/"/>
    <id>http://loadingmore.com/2017/08/16/Jquery操作select下拉框值/</id>
    <published>2017-08-15T16:36:00.000Z</published>
    <updated>2017-08-15T16:38:39.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><blockquote>
<p>最近项目中操作select的option值得场景还是很多的，在此记录一下,以免忘记</p>
</blockquote>
<h2 id="结构"><a href="#结构" class="headerlink" title="结构"></a>结构</h2><figure class="highlight html"><table><tr><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"selected"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"1"</span> <span class="attr">data-id</span>=<span class="string">"1000"</span>&gt;</span><span class="tag">&lt;/<span class="name">option</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"2"</span> <span class="attr">data-id</span>=<span class="string">"1001"</span>&gt;</span><span class="tag">&lt;/<span class="name">option</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"3"</span> <span class="attr">data-id</span>=<span class="string">"1002"</span>&gt;</span><span class="tag">&lt;/<span class="name">option</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"4"</span> <span class="attr">data-id</span>=<span class="string">"1003"</span>&gt;</span><span class="tag">&lt;/<span class="name">option</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></div></pre></td></tr></table></figure>
<h2 id="操作"><a href="#操作" class="headerlink" title="操作"></a>操作</h2><figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="comment">// change事件中进行操作</span></div><div class="line">$(<span class="string">'#selected'</span>).on(<span class="string">'change'</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="comment">// 获取被选中的option 自定义属性</span></div><div class="line">    <span class="keyword">var</span> selectedOpt = $(<span class="string">'#selected'</span>).find(<span class="string">'option:selected'</span>).attr(<span class="string">'data-id'</span>)</div><div class="line"></div><div class="line">    <span class="comment">//获取下拉框选中项的value属性值</span></div><div class="line">    <span class="keyword">var</span> selectedVal = $(<span class="string">'#selected'</span>).val()</div><div class="line"></div><div class="line">    <span class="comment">//获取下拉框选中项的index属性值</span></div><div class="line">    <span class="keyword">var</span> selectedIndex = $(<span class="string">"#selected"</span>).get(<span class="number">0</span>).selectedIndex</div><div class="line"></div><div class="line">    <span class="built_in">console</span>.log(selectedIndex)</div><div class="line">&#125;)</div><div class="line"></div><div class="line"><span class="comment">//设置下拉框值为4的option选中</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">setOpt</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    $(<span class="string">'#selected option[value=4]'</span>).attr(<span class="string">'selected'</span>,<span class="string">'selected'</span>)</div><div class="line">&#125;</div><div class="line"><span class="comment">// setOpt()</span></div><div class="line"></div><div class="line"><span class="comment">//在下拉框最后添加一个选项</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">addOpt</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    $(<span class="string">'#selected'</span>).append(<span class="string">'&lt;option value="5" data-id="1004"&gt;蘑菇云&lt;/option&gt;'</span>)</div><div class="line">&#125;</div><div class="line"><span class="comment">// addOpt()</span></div><div class="line"></div><div class="line"><span class="comment">//移除下拉框最后一个选项</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">removeLastOpt</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    $(<span class="string">'#selected option:last'</span>).remove()</div><div class="line">&#125;</div><div class="line"><span class="comment">// removeLastOpt()</span></div><div class="line"></div><div class="line"><span class="comment">// 获取最后一个下拉框自定义属性值</span></div><div class="line"><span class="keyword">var</span> selectMaxIndex = $(<span class="string">"#selected option:last"</span>).attr(<span class="string">"data-id"</span>);</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;最近项目中操作select的option值得场景还是很多的，在此记录一下,以免忘记&lt;/p&gt;
&lt;/blockquot
    
    </summary>
    
    
      <category term="Jquery" scheme="http://loadingmore.com/tags/Jquery/"/>
    
      <category term="select" scheme="http://loadingmore.com/tags/select/"/>
    
  </entry>
  
  <entry>
    <title>一次FormData递归上传图片小记</title>
    <link href="http://loadingmore.com/2017/08/14/%E4%B8%80%E6%AC%A1FormData%E9%80%92%E5%BD%92%E4%B8%8A%E4%BC%A0%E5%9B%BE%E7%89%87%E5%B0%8F%E8%AE%B0/"/>
    <id>http://loadingmore.com/2017/08/14/一次FormData递归上传图片小记/</id>
    <published>2017-08-14T12:09:48.000Z</published>
    <updated>2017-08-15T23:42:58.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p>最近项目开发中遇到一个多图上传的需求，后台给的接口支持FormData.<a href="https://developer.mozilla.org/zh-CN/docs/Web/API/FormData/FormData" target="_blank" rel="external">这里查看详情FormData</a></p>
<h2 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h2><p>刚开始没有太好的办法，之前用formdata传图，都是固定的个数，对应唯一的filename参数名字，不会发生冲突，所以刚开始想到了for循环…结果就是能上传，但是顺序全部搞乱了，还有就是图片传的重复，缺失严重</p>
<h2 id="递归优化"><a href="#递归优化" class="headerlink" title="递归优化"></a>递归优化</h2><p>想着for循环也不能控制上传进度，所以采用了递归的思路<br><figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="comment">// 伪代码</span></div><div class="line">$(<span class="string">'#sleect_input'</span>).off().on(<span class="string">'change'</span>,<span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;</div><div class="line">    <span class="keyword">var</span> files = e.target.files,</div><div class="line">        resFiles = [];</div><div class="line">    <span class="comment">// 收集files</span></div><div class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;files.length;i++)&#123;</div><div class="line">        resFiles.push(files[i])</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// 上传</span></div><div class="line">    $(<span class="string">'#upLoad'</span>).on(<span class="string">'click'</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">        <span class="comment">// 递归</span></div><div class="line">        (<span class="function"><span class="keyword">function</span> <span class="title">uploadFiles</span>(<span class="params"></span>)</span>&#123;</div><div class="line">            <span class="keyword">var</span> f = resFiles.shift();</div><div class="line">            <span class="keyword">if</span>(f)&#123;</div><div class="line">                <span class="comment">// 这里创建是为了避免重名导致上传混乱，每次都重新创建新的对象</span></div><div class="line">                <span class="keyword">var</span> formdata = <span class="keyword">new</span> FormData();</div><div class="line">                formdata.append(<span class="string">'file'</span>,f);</div><div class="line">                $.ajax(&#123;</div><div class="line">                    <span class="attr">url</span>:<span class="string">'XXXXXXXXXXXXXXXXXXXXXX'</span>,</div><div class="line">                    <span class="attr">type</span>: <span class="string">"POST"</span>,</div><div class="line">                    <span class="attr">data</span>: formdata,</div><div class="line">                    <span class="attr">processData</span>: <span class="literal">false</span>,</div><div class="line">                    <span class="attr">contentType</span>: <span class="literal">false</span>,</div><div class="line">                &#125;).always(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">                    <span class="built_in">console</span>.log(<span class="string">"pending+正在上传"</span>);</div><div class="line">                    <span class="comment">// 继续下一步上传</span></div><div class="line">                    uploadFiles();</div><div class="line">                &#125;);</div><div class="line">            &#125;<span class="keyword">else</span>&#123;</div><div class="line">                <span class="built_in">console</span>.log(<span class="string">"finished+上传完毕要做的事"</span>);</div><div class="line">            &#125;</div><div class="line">        &#125;)()</div><div class="line">    &#125;)</div><div class="line">&#125;)</div></pre></td></tr></table></figure></p>
<p>至此，解决了多图片上传的问题</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;问题&quot;&gt;&lt;a href=&quot;#问题&quot; class=&quot;headerlink&quot; title=&quot;问题&quot;&gt;&lt;/a&gt;问题&lt;/h2&gt;&lt;p&gt;最近项目开发中遇到一个多图上传的需求，后台给的接口支持FormData.&lt;a href=&quot;https://developer.mozilla
    
    </summary>
    
    
      <category term="Javascript" scheme="http://loadingmore.com/tags/Javascript/"/>
    
      <category term="FormData" scheme="http://loadingmore.com/tags/FormData/"/>
    
  </entry>
  
  <entry>
    <title>Vuex在IE上的报错处理</title>
    <link href="http://loadingmore.com/2017/08/09/Vuex%E5%9C%A8IE%E4%B8%8A%E7%9A%84%E6%8A%A5%E9%94%99%E5%A4%84%E7%90%86/"/>
    <id>http://loadingmore.com/2017/08/09/Vuex在IE上的报错处理/</id>
    <published>2017-08-09T11:16:07.000Z</published>
    <updated>2017-08-09T11:20:46.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>最近在做一个后台项目，其中遇到了vuex在IE浏览器中报错的问题，于是就有了这篇博文进行记录</p>
</blockquote>
<h2 id="报错语句"><a href="#报错语句" class="headerlink" title="报错语句"></a>报错语句</h2><figure class="highlight js"><table><tr><td class="code"><pre><div class="line">SCRIPT5022: [vuex] vuex requires a <span class="built_in">Promise</span> polyfill <span class="keyword">in</span> <span class="keyword">this</span> browser.</div></pre></td></tr></table></figure>
<h2 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h2><p>1.先安装babel-polyfill<br><figure class="highlight js"><table><tr><td class="code"><pre><div class="line">npm install babel-polyfill --save-dev</div></pre></td></tr></table></figure></p>
<p>2.build/webpack.base.config.js下修改文件<br><figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="comment">// 入口文件改为如下</span></div><div class="line">entry: &#123;</div><div class="line">  <span class="attr">app</span>: [<span class="string">'babel-polyfill'</span>,<span class="string">'./src/main.js'</span>]</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="原因"><a href="#原因" class="headerlink" title="原因"></a>原因</h2><p>IE浏览器没有内置Promise对象。不仅如此，几乎所有的ES6新增的方法在IE都不能用，比如Array.from。因为babel只会转译语法，并不会新增方法</p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;最近在做一个后台项目，其中遇到了vuex在IE浏览器中报错的问题，于是就有了这篇博文进行记录&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;报错语句&quot;&gt;&lt;a href=&quot;#报错语句&quot; class=&quot;headerlink&quot; title=&quot;报错语
    
    </summary>
    
    
      <category term="Vue" scheme="http://loadingmore.com/tags/Vue/"/>
    
  </entry>
  
  <entry>
    <title>一个有点意思的正则</title>
    <link href="http://loadingmore.com/2017/07/01/%E4%B8%80%E4%B8%AA%E6%9C%89%E7%82%B9%E6%84%8F%E6%80%9D%E7%9A%84%E6%AD%A3%E5%88%99/"/>
    <id>http://loadingmore.com/2017/07/01/一个有点意思的正则/</id>
    <published>2017-07-01T13:37:38.000Z</published>
    <updated>2017-07-16T11:50:22.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>周末闲来无事，没事逛逛前端群,碰到一个有点意思的题目,记录下来</p>
</blockquote>
<h2 id="需求"><a href="#需求" class="headerlink" title="需求"></a>需求</h2><p>一个数组，里面的字符串都有相同的前几个字，但是后面的不相同  如何把这相同的提取出来<br>大概像下面这样：<br><figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="keyword">const</span> arr = [<span class="string">'test23'</span>,<span class="string">'testtr'</span>,<span class="string">'test90'</span>] <span class="comment">//共同体 test</span></div><div class="line"><span class="keyword">const</span> arr1 = [<span class="string">'tes23'</span>,<span class="string">'testtr'</span>,<span class="string">'test90'</span>] <span class="comment">//共同体 tes  小心搞错哦</span></div><div class="line"><span class="keyword">const</span> arr2 = [<span class="string">'回家3'</span>,<span class="string">'回家5'</span>,<span class="string">'回家吗'</span>] <span class="comment">// 共同体 回家</span></div></pre></td></tr></table></figure></p>
<h2 id="我的方法"><a href="#我的方法" class="headerlink" title="我的方法"></a>我的方法</h2><p>看到的第一感觉就是用正则(谁让我逻辑很菜呢…)<br><figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line">* @param &#123;len&#125; 数组长度 下面用来匹配重复的个数</div><div class="line">* @param &#123;reg&#125; 不用说了，我们的匹配规则</div><div class="line">* @param &#123;data&#125; 换个思路，当做字符串进行处理</div><div class="line">*/</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">getWord</span>(<span class="params">arr</span>)</span>&#123;</div><div class="line">    <span class="keyword">var</span> len = arr.length,</div><div class="line">        reg = <span class="keyword">new</span> <span class="built_in">RegExp</span>(<span class="string">'^(.*)(.*\\1)&#123;'</span>+(len<span class="number">-1</span>)+<span class="string">'&#125;'</span>,<span class="string">'g'</span>),</div><div class="line">        data = arr.join(<span class="string">''</span>);</div><div class="line">    <span class="keyword">return</span> reg.exec(data)[<span class="number">1</span>]</div><div class="line">&#125;</div><div class="line"><span class="built_in">console</span>.log(getWord(arr)) <span class="comment">// test</span></div><div class="line"><span class="built_in">console</span>.log(getWord(arr1)) <span class="comment">//tes</span></div><div class="line"><span class="built_in">console</span>.log(getWord(arr2)) <span class="comment">//回家</span></div></pre></td></tr></table></figure></p>
<h2 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h2><p>我也不知道(逃…),我就想安安静静的温习个正则而已.<br>如果有更好的方法，烦请与我联系,向您请教，如有bug,请轻拍.我的邮箱：biyuqiwan@163.com</p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;周末闲来无事，没事逛逛前端群,碰到一个有点意思的题目,记录下来&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;需求&quot;&gt;&lt;a href=&quot;#需求&quot; class=&quot;headerlink&quot; title=&quot;需求&quot;&gt;&lt;/a&gt;需求&lt;/h2&gt;&lt;p&gt;一个数组
    
    </summary>
    
    
      <category term="正则" scheme="http://loadingmore.com/tags/%E6%AD%A3%E5%88%99/"/>
    
      <category term="RegExp" scheme="http://loadingmore.com/tags/RegExp/"/>
    
  </entry>
  
  <entry>
    <title>换电脑后,如何完美迁出hexo博客</title>
    <link href="http://loadingmore.com/2017/06/21/%E6%8D%A2%E7%94%B5%E8%84%91%E5%90%8E-%E5%A6%82%E4%BD%95%E5%AE%8C%E7%BE%8E%E8%BF%81%E5%87%BAhexo%E5%8D%9A%E5%AE%A2/"/>
    <id>http://loadingmore.com/2017/06/21/换电脑后-如何完美迁出hexo博客/</id>
    <published>2017-06-21T14:25:48.000Z</published>
    <updated>2017-06-21T15:33:22.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>最近换了电脑，之前电脑上搭建的静态博客也需要迁移了，上网查了下资料，自己也着手成功的迁移到了新的电脑</p>
</blockquote>
<h2 id="开始前准备"><a href="#开始前准备" class="headerlink" title="开始前准备"></a>开始前准备</h2><p>本博文默认git,nodejs已经安装好</p>
<h2 id="分析文件"><a href="#分析文件" class="headerlink" title="分析文件"></a>分析文件</h2><h3 id="1-哪些文件是必须拷贝走的-拷贝到新的电脑"><a href="#1-哪些文件是必须拷贝走的-拷贝到新的电脑" class="headerlink" title="1.哪些文件是必须拷贝走的(拷贝到新的电脑)"></a>1.哪些文件是必须拷贝走的(拷贝到新的电脑)</h3><p>首先是之前自己修改的文件，像配置文件_config.yml,theme文件夹，source文件夹自己写的原始文件这些都是必须要拷贝走的。除此之外还有scaffolds文件夹(文件的模板)，package.json(使用哪些包)，.gitignore(提交忽略哪些文件夹)<br>总结：</p>
<ul>
<li>_config.yml</li>
<li>theme</li>
<li>source</li>
<li>scaffolds</li>
<li>package.json</li>
<li>.gitignore</li>
</ul>
<p><strong> 这些是需要拷贝的 </strong></p>
<h3 id="2-哪些文件是需要忽略不用管的"><a href="#2-哪些文件是需要忽略不用管的" class="headerlink" title="2.哪些文件是需要忽略不用管的"></a>2.哪些文件是需要忽略不用管的</h3><p>.git node_mouldes/ public/ .deploy_git/ db.json</p>
<h2 id="开始迁移"><a href="#开始迁移" class="headerlink" title="开始迁移"></a>开始迁移</h2><figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="comment">// 全局安装hexo</span></div><div class="line">npm install hexo-cli -g</div><div class="line"></div><div class="line"><span class="comment">// 把必须拷贝的文件，拷贝到新建的文件夹内，执行以下命令</span></div><div class="line"><span class="comment">// 在新建的文件夹内打开命令行，安装必要的模块，初始化</span></div><div class="line"><span class="comment">// 这里不用hexo init初始化，因为配置文件我们已经拷贝过来(一定要慎重，严格按照教程来)</span></div><div class="line"></div><div class="line">npm install</div><div class="line"></div><div class="line"><span class="comment">// 安装其他一些必要的组件</span></div><div class="line">npm install hexo-deployer-git --save</div><div class="line"></div><div class="line">npm install hexo-generator-feed --save</div><div class="line"></div><div class="line">npm install hexo-generator-sitemap --save</div></pre></td></tr></table></figure>
<h2 id="测试是否安装成功"><a href="#测试是否安装成功" class="headerlink" title="测试是否安装成功"></a>测试是否安装成功</h2><figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="comment">//先本地预览</span></div><div class="line">hexo clean</div><div class="line"></div><div class="line">hexo g</div><div class="line"></div><div class="line">hexo s</div><div class="line"></div><div class="line"><span class="comment">//此时可以先在localhost:4000 本地预览博客，如果不报错，那就说明迁移成功</span></div><div class="line"></div><div class="line"><span class="comment">// 正式部署</span></div><div class="line">hexo clean</div><div class="line"></div><div class="line">hexo g</div><div class="line"></div><div class="line">hexo d</div></pre></td></tr></table></figure>
<p>至此，可以打开网页看看部署情况，祝各位成功，有问题随时联系我 biyuqiwan@163.com</p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;最近换了电脑，之前电脑上搭建的静态博客也需要迁移了，上网查了下资料，自己也着手成功的迁移到了新的电脑&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;开始前准备&quot;&gt;&lt;a href=&quot;#开始前准备&quot; class=&quot;headerlink&quot; titl
    
    </summary>
    
    
      <category term="javascript" scheme="http://loadingmore.com/tags/javascript/"/>
    
      <category term="hexo" scheme="http://loadingmore.com/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title>《你不知道的javascript中》JS宽松相等和严格相等</title>
    <link href="http://loadingmore.com/2017/06/21/%E3%80%8A%E4%BD%A0%E4%B8%8D%E7%9F%A5%E9%81%93%E7%9A%84javascript%E4%B8%AD%E3%80%8BJS%E5%AE%BD%E6%9D%BE%E7%9B%B8%E7%AD%89%E5%92%8C%E4%B8%A5%E6%A0%BC%E7%9B%B8%E7%AD%89/"/>
    <id>http://loadingmore.com/2017/06/21/《你不知道的javascript中》JS宽松相等和严格相等/</id>
    <published>2017-06-21T12:43:07.000Z</published>
    <updated>2017-08-09T11:18:02.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>温故而知新，最近在看《你不知道的javascript》系列的书记，看到深处，总有新的发现，好记性不如烂笔头，遂写下这篇读书笔记</p>
</blockquote>
<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>宽松相等==和严格相等===都用来判断两个值是否”相等”,但是他们也有一个很重要的区别，尤其是判断条件上<br>常见的误区是”==检查值是否相等，===检查值和类型是否相等”。这样理解似乎有点道理，但是还不够准确，正确的解释是：</p>
<blockquote>
<p>“==允许在相等比较中进行强制类型转换，而===不允许”</p>
</blockquote>
<h1 id="抽象值操作"><a href="#抽象值操作" class="headerlink" title="抽象值操作"></a>抽象值操作</h1><p>(名词解释，后面用到再来看也可以)</p>
<h2 id="ToNumber"><a href="#ToNumber" class="headerlink" title="ToNumber"></a>ToNumber</h2><p>ES5 规范在 9.3 节定义了<br>抽象操作 ToNumber。<br>其中 true 转换为 1，false 转换为 0。undefined 转换为 NaN，null 转换为 0。</p>
<h2 id="ToString"><a href="#ToString" class="headerlink" title="ToString"></a>ToString</h2><p>定义了抽象操作 ToString，它负责处理非字符串到字符串的强制类型转换。<br>基本类型值的字符串化规则为：null 转换为 “null”，undefined 转换为 “undefined”，true<br>转换为 “true”。数字的字符串化则遵循通用规则</p>
<h2 id="ToPrimitive"><a href="#ToPrimitive" class="headerlink" title="ToPrimitive"></a>ToPrimitive</h2><p>为了将值转换为相应的基本类型值，抽象操作 ToPrimitive（参见 ES5 规范 9.1 节）会首先<br>（通过内部操作 DefaultValue，参见 ES5 规范 8.12.8 节）检查该值是否有 valueOf() 方法。<br>如果有并且返回基本类型值，就使用该值进行强制类型转换。如果没有就使用 toString()<br>的返回值（如果存在）来进行强制类型转换。<br>如果 valueOf() 和 toString() 均不返回基本类型值，会产生 TypeError 错误</p>
<h1 id="抽象相等"><a href="#抽象相等" class="headerlink" title="抽象相等"></a>抽象相等</h1><h2 id="1-字符串和数字之间的相等比较"><a href="#1-字符串和数字之间的相等比较" class="headerlink" title="1.字符串和数字之间的相等比较"></a>1.字符串和数字之间的相等比较</h2><figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="keyword">var</span> a = <span class="number">42</span>；</div><div class="line"><span class="keyword">var</span> b = <span class="string">"42"</span>;</div><div class="line"></div><div class="line">a === b <span class="comment">//false</span></div><div class="line">a == b <span class="comment">//true</span></div></pre></td></tr></table></figure>
<p>因为没有强制类型的转换，所以a===b为false,42不等于”42”<br>a == b 是宽松相等,如果值得类型不同，则对其中之一或者两者进行强制类型转换。<br>具体怎么转环？还要看规范：<br>ES5规范汇这样定义：</p>
<p><strong>(1) 如果Type(x) 是数字，Type(y) 是字符串，则返回 x == ToNumber(y)的结果。</strong></p>
<p><strong>(2) 如果Type(x)是字符串，Type(y)是数字，则返回ToNumber(x) == y的结果</strong></p>
<h2 id="2-其他类型和布尔类型之间的相等比较"><a href="#2-其他类型和布尔类型之间的相等比较" class="headerlink" title="2.其他类型和布尔类型之间的相等比较"></a>2.其他类型和布尔类型之间的相等比较</h2><p>== 最容易出错的一个地方时true和false与其他类型之间的相等比较。<br><figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="keyword">var</span> a = <span class="string">"42"</span>;</div><div class="line"><span class="keyword">var</span> b = <span class="literal">true</span>;</div><div class="line"></div><div class="line">a == b <span class="comment">// false</span></div></pre></td></tr></table></figure></p>
<p>根据以往的经验，”42”是一个真值，为什么==的结果不是true呢？原因及简单又复杂，很容易掉坑里，看看规范怎么说：</p>
<p><strong>(1) 如果Type(x)是布尔类型，则返回ToNumber(x) == y的结果 </strong></p>
<p><strong>(2) 如果Type(y)是布尔类型，则返回x == ToNumber(y)的结果</strong><br>看个例子<br><figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="keyword">var</span> x = <span class="literal">true</span></div><div class="line"><span class="keyword">var</span> y = <span class="string">"42"</span></div><div class="line"></div><div class="line">x == y <span class="comment">//false</span></div></pre></td></tr></table></figure></p>
<p>Type(x)是布尔值，所以准换后为1，变为1 == “42”,两者类型仍然不通，进而”42”继续转换为42，最后变为1 == 42，结果是false，<br>反过来也一样<br><figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="keyword">var</span> x = <span class="string">'42'</span></div><div class="line"><span class="keyword">var</span> y = <span class="literal">false</span></div><div class="line"></div><div class="line">x == y <span class="comment">//false</span></div></pre></td></tr></table></figure></p>
<p>一个值既不等于true,也不等于false.太奇怪了吧？</p>
<p>这个问题本身就是错误的，我们被自己的大脑欺骗了。</p>
<p>“42” 是一个真值没错，但 “42” == true 中并没有发生布尔值的比较和强制类型转换。</p>
<p>这里不是 “42” 转换为布尔值（true） ，而是 true 转换为 1，”42” 转换为 42。</p>
<p>这里并不涉及 ToBoolean，所以 “42” 是真值还是假值与 == 本身没有关系！<br>重点是我们要搞清楚 == 对不同的类型组合怎样处理。== 两边的布尔值会被强制类型转换为数字。</p>
<p>很奇怪吧？建议无论什么情况下都不要使用 == true 和 == false。<br>请注意，这里说的只是 ==，=== true 和 === false 不允许强制类型转换，所以并不涉及ToNumber。<br><figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="keyword">var</span> a = <span class="string">'42'</span></div><div class="line"></div><div class="line"><span class="comment">// 不要这样用，条件不成立</span></div><div class="line"><span class="keyword">if</span>(a == <span class="literal">true</span>)&#123;</div><div class="line">    <span class="comment">//</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 也不要这样</span></div><div class="line"><span class="keyword">if</span>(a === <span class="literal">true</span>)&#123;</div><div class="line">    <span class="comment">//</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//这样显式用法没有问题</span></div><div class="line"><span class="keyword">if</span>(a)&#123;</div><div class="line">    <span class="comment">//</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 这样的显式更好</span></div><div class="line"><span class="keyword">if</span>(!!a)&#123;</div><div class="line">    <span class="comment">//</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>避免了 == true 和 == false(也叫作布尔值的宽松相等)之后就不用担心这些坑了</p>
<h2 id="3-null和undefined之间的相等比较"><a href="#3-null和undefined之间的相等比较" class="headerlink" title="3.null和undefined之间的相等比较"></a>3.null和undefined之间的相等比较</h2><p>null 和 unfined之间的== 也涉及隐式强制类型的转换：</p>
<p><strong>(1)如果x为null,y为unfined,这结果为true</strong></p>
<p><strong>(2)如果x为unfined，y为null,则结果为true</strong></p>
<p>在==中null和unfined相等(他们也与其自身相等),除此之外其他值不存在这种情况<br><figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="keyword">var</span> a = nul;</div><div class="line"><span class="keyword">var</span> b;</div><div class="line"></div><div class="line">a == b <span class="comment">//true</span></div><div class="line">a == <span class="literal">null</span> <span class="comment">// true</span></div><div class="line">b == <span class="literal">null</span> <span class="comment">//true</span></div><div class="line"></div><div class="line">a == <span class="literal">false</span>  <span class="comment">//false</span></div><div class="line">b == <span class="literal">false</span> <span class="comment">//false</span></div><div class="line">a == <span class="string">''</span>  <span class="comment">//false</span></div><div class="line">b == <span class="string">''</span>  <span class="comment">//fasle</span></div><div class="line">a == <span class="number">0</span>  <span class="comment">//false</span></div><div class="line">b == <span class="number">0</span> <span class="comment">//false</span></div></pre></td></tr></table></figure></p>
<p>null 和 undefined 之间的强制类型转换是安全可靠的，上例中除 null 和 undefined 以外的</p>
<p>其他值均无法得到假阳（false positive）结果。个人认为通过这种方式将 null 和 undefined<br>作为等价值来处理比较好。<br>ex:<br><figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="keyword">var</span> a = doSomething()</div><div class="line"></div><div class="line"><span class="keyword">if</span>(a == <span class="literal">null</span>)&#123;</div><div class="line">    <span class="comment">//...</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>条件判断a ==null仅仅在函数返回null和undefined时才成立，除此之外都不成立</p>
<h2 id="4-对象和非对象之间的相等比较"><a href="#4-对象和非对象之间的相等比较" class="headerlink" title="4.对象和非对象之间的相等比较"></a>4.对象和非对象之间的相等比较</h2><p>ES5 规范 11.9.3.8-9 做如下规定：</p>
<p><strong>(1)如果Type(x)是字符串或者数字，Type(y)是对象，则返回x == ToPromitive(y)的结果</strong></p>
<p><strong>(2)如果 Type(x) 是对象，Type(y) 是字符串或数字，则返回 ToPromitive(x) == y 的结果</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="keyword">var</span> a = <span class="number">42</span></div><div class="line"><span class="keyword">var</span> b = [<span class="number">42</span>]</div><div class="line">a == b <span class="comment">//true</span></div></pre></td></tr></table></figure>
<p>[ 42 ] 首先调用 ToPromitive 抽象操作 ，返回 “42”，变成 “42” == 42，然后<br>又变成 42 == 42，最后二者相等</p>
<h1 id="资料"><a href="#资料" class="headerlink" title="资料"></a>资料</h1><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Equality_comparisons_and_sameness" target="_blank" rel="external">JavaScript 中的相等性判断|MDN</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;温故而知新，最近在看《你不知道的javascript》系列的书记，看到深处，总有新的发现，好记性不如烂笔头，遂写下这篇读书笔记&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlin
    
    </summary>
    
    
      <category term="Javascript" scheme="http://loadingmore.com/tags/Javascript/"/>
    
  </entry>
  
  <entry>
    <title>FreeCodeCamp初级脚本算法题-笔记</title>
    <link href="http://loadingmore.com/2017/06/12/FreeCodeCamp%E5%88%9D%E7%BA%A7%E8%84%9A%E6%9C%AC%E7%AE%97%E6%B3%95%E9%A2%98-%E7%AC%94%E8%AE%B0/"/>
    <id>http://loadingmore.com/2017/06/12/FreeCodeCamp初级脚本算法题-笔记/</id>
    <published>2017-06-11T16:03:36.000Z</published>
    <updated>2017-06-13T14:22:30.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p><a href="http://www.freecodecamp.cn/" target="_blank" rel="external">FreeCodeCamp</a>是一个学习编程的开源社区,里面有面向前端方面的基础知识，也有一些脚本算法相关的题目，今天花了2个小时把初级脚本算法题16道，研究了一下(我刚做了15,还有一道需要研究下…后面补上+注释),通过几个小时的学习，领会到FCC是在实践练习中掌握知识，而不是学习背记理论了解知识,前端本身也是一种技术，所以多实践，多研究，才能加深对这门语言的理解.</p>
</blockquote>
<h2 id="翻转字符串算法挑战"><a href="#翻转字符串算法挑战" class="headerlink" title="翻转字符串算法挑战"></a>翻转字符串算法挑战</h2><figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="keyword">const</span> reverseString = <span class="function"><span class="keyword">function</span> (<span class="params">str</span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> str.split(<span class="string">''</span>).reverse().join(<span class="string">''</span>)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="阶乘算法挑战"><a href="#阶乘算法挑战" class="headerlink" title="阶乘算法挑战"></a>阶乘算法挑战</h2><figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="keyword">const</span> factorialize = <span class="function"><span class="keyword">function</span> (<span class="params">num</span>) </span>&#123;</div><div class="line">    <span class="keyword">let</span> res = <span class="number">1</span>;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i=num;i&gt;<span class="number">0</span>;i--)&#123;</div><div class="line">        res *= i</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> res</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="comment">// 递归</span></div><div class="line"><span class="keyword">const</span> factorialize2 = <span class="function"><span class="keyword">function</span> (<span class="params">num</span>) </span>&#123;</div><div class="line">    <span class="keyword">if</span>(num &lt;= <span class="number">1</span>)&#123;</div><div class="line">        <span class="keyword">return</span> <span class="number">1</span></div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> num * factorialize2(num<span class="number">-1</span>)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="回文算法挑战"><a href="#回文算法挑战" class="headerlink" title="回文算法挑战"></a>回文算法挑战</h2><p>如果一个字符串忽略标点符号、大小写和空格，正着读和反着读一模一样，那么这个字符串就是palindrome(回文)<br><figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="keyword">const</span> palindrome = <span class="function"><span class="keyword">function</span> (<span class="params">str</span>) </span>&#123;</div><div class="line">    str = str.replace(<span class="regexp">/[^0-9a-zA-Z]/gi</span>,<span class="string">''</span>).toLowerCase()</div><div class="line">    <span class="keyword">const</span> len = str.length</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i=<span class="number">0</span>,j=len<span class="number">-1</span>;i&lt;len;i++,j--)&#123;</div><div class="line">        <span class="keyword">if</span>(str[i] !== str[j])&#123;</div><div class="line">            <span class="keyword">return</span> <span class="literal">false</span></div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="literal">true</span></div><div class="line">&#125;</div><div class="line"><span class="built_in">console</span>.log(palindrome(<span class="string">'mnnm'</span>))</div></pre></td></tr></table></figure></p>
<h2 id="寻找最长的单词算法挑战"><a href="#寻找最长的单词算法挑战" class="headerlink" title="寻找最长的单词算法挑战"></a>寻找最长的单词算法挑战</h2><figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="keyword">const</span> findLongestWord = <span class="function"><span class="keyword">function</span> (<span class="params">word</span>) </span>&#123;</div><div class="line">    <span class="keyword">let</span> words = word.split(<span class="string">' '</span>),</div><div class="line">        max = <span class="number">0</span>,</div><div class="line">        len = words.length;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i=<span class="number">0</span>;i&lt;len;i++)&#123;</div><div class="line">        <span class="keyword">if</span>(words[i].length &gt; max)&#123;</div><div class="line">            max = words.length</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> max</div><div class="line">&#125;</div><div class="line"><span class="built_in">console</span>.log(findLongestWord(<span class="string">"The quick brown fox jumped over the lazy dog"</span>))</div></pre></td></tr></table></figure>
<h2 id="设置首字母大写算法挑战"><a href="#设置首字母大写算法挑战" class="headerlink" title="设置首字母大写算法挑战."></a>设置首字母大写算法挑战.</h2><figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="keyword">const</span> titleCase = <span class="function"><span class="keyword">function</span> (<span class="params">w</span>) </span>&#123;</div><div class="line">    <span class="keyword">let</span> word = w.toLowerCase().split(<span class="string">' '</span>),</div><div class="line">        len = word.length;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i=<span class="number">0</span>;i&lt;len;i++)&#123;</div><div class="line">        <span class="keyword">let</span> filter = word[i].charAt(<span class="number">0</span>).toUpperCase()</div><div class="line">        word[i] = word[i].replace(word[i].charAt(<span class="number">0</span>),filter)</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> word.join(<span class="string">' '</span>)</div><div class="line">&#125;</div><div class="line"><span class="built_in">console</span>.log(titleCase(<span class="string">'I"m a little tea pot'</span>))</div></pre></td></tr></table></figure>
<h2 id="寻找数组中的最大值算法挑战"><a href="#寻找数组中的最大值算法挑战" class="headerlink" title="寻找数组中的最大值算法挑战"></a>寻找数组中的最大值算法挑战</h2><p>大数组中包含了4个小数组，分别找到每个小数组中的最大值，然后把它们串联起来，形成一个新数组。<br><figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="keyword">const</span> largestOfFour = <span class="function"><span class="keyword">function</span> (<span class="params">arr</span>) </span>&#123;</div><div class="line">    <span class="keyword">let</span> len = arr.length,</div><div class="line">        res = [];</div><div class="line">    <span class="comment">// 写个执行解析出每个数组大值得函数</span></div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">getMax</span>(<span class="params">s</span>)</span>&#123;</div><div class="line">        <span class="keyword">let</span> ss = s.sort(<span class="function"><span class="keyword">function</span>(<span class="params">a,b</span>)</span>&#123;</div><div class="line">            <span class="keyword">return</span> b - a</div><div class="line">        &#125;)</div><div class="line">        <span class="keyword">return</span> ss[<span class="number">0</span>]</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i=<span class="number">0</span>;i&lt;len;i++)&#123;</div><div class="line">        <span class="comment">// 动态添加每个最大值</span></div><div class="line">        res.push(getMax(arr[i]))</div><div class="line">    &#125;</div><div class="line">    <span class="comment">// 返回</span></div><div class="line">    <span class="keyword">return</span> res</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">var</span> stt = [[<span class="number">4</span>, <span class="number">5</span>, <span class="number">1</span>, <span class="number">3</span>], [<span class="number">13</span>, <span class="number">27</span>, <span class="number">18</span>, <span class="number">26</span>], [<span class="number">32</span>, <span class="number">35</span>, <span class="number">37</span>, <span class="number">39</span>], [<span class="number">1000</span>, <span class="number">1001</span>, <span class="number">857</span>, <span class="number">1</span>]]</div><div class="line"><span class="built_in">console</span>.log(largestOfFour(stt))</div><div class="line"><span class="comment">// [5, 27, 39, 1001]</span></div></pre></td></tr></table></figure></p>
<h2 id="确认末尾字符算法挑战"><a href="#确认末尾字符算法挑战" class="headerlink" title="确认末尾字符算法挑战"></a>确认末尾字符算法挑战</h2><p>检查一个字符串(str)是否以指定的字符串(target)结尾。<br>如果是，返回true;如果不是，返回false。<br><figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="keyword">const</span> confirmEnding = <span class="function"><span class="keyword">function</span> (<span class="params">str,target</span>) </span>&#123;</div><div class="line">    <span class="keyword">let</span> reg = <span class="keyword">new</span> <span class="built_in">RegExp</span>(<span class="string">""</span>+target+<span class="string">"$"</span>,<span class="string">'gi'</span>)</div><div class="line">    <span class="keyword">if</span>(reg.test(str))&#123;</div><div class="line">        <span class="keyword">return</span> <span class="literal">true</span></div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="literal">false</span></div><div class="line">&#125;</div><div class="line"><span class="built_in">console</span>.log(confirmEnding(<span class="string">"He has to give me a new name"</span>, <span class="string">"me"</span>))</div></pre></td></tr></table></figure></p>
<h2 id="重复操作算法挑战"><a href="#重复操作算法挑战" class="headerlink" title="重复操作算法挑战"></a>重复操作算法挑战</h2><p>重复一个指定的字符串 num次，如果num是一个负数则返回一个空字符串。<br><figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="keyword">const</span> repeat = <span class="function"><span class="keyword">function</span>(<span class="params">str,num</span>)</span>&#123;</div><div class="line">    <span class="keyword">let</span> res = <span class="string">''</span>;</div><div class="line">    <span class="keyword">if</span>(num &lt; <span class="number">0</span>)&#123;</div><div class="line">        <span class="keyword">return</span> <span class="string">''</span></div><div class="line">    &#125;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i=<span class="number">0</span>;i&lt;=num;i++)&#123;</div><div class="line">        res += str</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> res</div><div class="line">&#125;</div><div class="line"><span class="built_in">console</span>.log(repeat(<span class="string">'ser'</span>,<span class="number">3</span>))</div><div class="line"><span class="comment">// serserser</span></div></pre></td></tr></table></figure></p>
<h2 id="符串截取算法挑战"><a href="#符串截取算法挑战" class="headerlink" title="符串截取算法挑战"></a>符串截取算法挑战</h2><p>如果字符串的长度比指定的参数num长，则把多余的部分用…来表示。<br>如果字符串的长度比指定的参数num短 返回原字符串<br>切记，插入到字符串尾部的三个点号也会计入字符串的长度。<br>但是，如果指定的参数num小于或等于3，则添加的三个点号不会计入字符串的长度。<br><figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="keyword">const</span> truncate = <span class="function"><span class="keyword">function</span>(<span class="params">str,num</span>)</span>&#123;</div><div class="line">    <span class="keyword">let</span> ss = <span class="string">''</span>,</div><div class="line">        tips = <span class="string">'...'</span>;</div><div class="line">    <span class="keyword">if</span>(str.length &gt; num)&#123;</div><div class="line">        <span class="keyword">if</span>(num &gt; <span class="number">3</span>)&#123;</div><div class="line">            <span class="keyword">return</span> str.substr(<span class="number">0</span>,(num<span class="number">-3</span>))+tips</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> str.substr(<span class="number">0</span>,num)+tips</div><div class="line">    &#125;<span class="keyword">else</span>&#123;</div><div class="line">        <span class="keyword">return</span> str</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="built_in">console</span>.log(truncate(<span class="string">"A-tisket a-tasket A green and yellow basket"</span>, <span class="number">8</span>))</div><div class="line"><span class="comment">// A-tis...</span></div></pre></td></tr></table></figure></p>
<h2 id="数组分割算法挑战"><a href="#数组分割算法挑战" class="headerlink" title="数组分割算法挑战"></a>数组分割算法挑战</h2><p>把一个数组arr按照指定的数组大小size分割成若干个数组块。<br>例如:chunk([1,2,3,4],2)=[[1,2],[3,4]];<br>chunk([1,2,3,4,5],2)=[[1,2],[3,4],[5]]<br>chunk([0, 1, 2, 3, 4, 5], 4) 应该返回 [[0, 1, 2, 3], [4, 5]].<br><figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line">*   Math.ceil 目的是未来算出能分多少组</div><div class="line">*   start 每组的起始索引</div><div class="line">*   end 每一组的末尾索引值</div><div class="line">*   通过循环不停地改变启起始末尾索引，</div><div class="line">*   动态的截取 arr.slice 返回一个截取后的数组</div><div class="line">*/</div><div class="line"><span class="keyword">const</span> chunk = <span class="function"><span class="keyword">function</span> (<span class="params">arr,size</span>) </span>&#123;</div><div class="line">    <span class="keyword">let</span> result = [],</div><div class="line">        groups = <span class="built_in">Math</span>.ceil(arr.length/size);</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i=<span class="number">0</span>;i&lt;groups;i++)&#123;</div><div class="line">        <span class="keyword">let</span> start = i * size,</div><div class="line">            end = start + size;</div><div class="line">        result.push(arr.slice(start,end))</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> result</div><div class="line">&#125;</div><div class="line"><span class="built_in">console</span>.log(chunk([<span class="number">1</span>,<span class="number">24</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>],<span class="number">3</span>)) <span class="comment">//[Array(3), Array(2)]</span></div></pre></td></tr></table></figure></p>
<h2 id="数组截断算法挑战"><a href="#数组截断算法挑战" class="headerlink" title="数组截断算法挑战"></a>数组截断算法挑战</h2><p>返回一个数组被截断n个元素后还剩余的元素，截断从索引0开始。<br><figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="keyword">const</span> slasher = <span class="function"><span class="keyword">function</span>(<span class="params">arr,howMany</span>)</span>&#123;</div><div class="line">    <span class="keyword">if</span>(howMany &gt; arr.length)&#123;</div><div class="line">        <span class="keyword">return</span> []</div><div class="line">    &#125;</div><div class="line">    <span class="comment">// 换个思路,利用slice的负数从后面截取</span></div><div class="line">    <span class="keyword">return</span> arr.slice(howMany-arr.length)</div><div class="line">&#125;</div><div class="line"><span class="built_in">console</span>.log(slasher([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>], <span class="number">0</span>))</div><div class="line"><span class="comment">// [1, 2, 3]</span></div></pre></td></tr></table></figure></p>
<h2 id="数组查询算法挑战"><a href="#数组查询算法挑战" class="headerlink" title="数组查询算法挑战"></a>数组查询算法挑战</h2><p>蛤蟆可以吃队友，也可以吃对手。<br>如果数组第一个字符串元素包含了第二个字符串元素的所有字符，函数返回true。<br>举例，[“hello”, “Hello”]应该返回true，因为在忽略大小写的情况下，第二个字符串的所有字符都可以在第一个字符串找到。<br>[“hello”, “hey”]应该返回false，因为字符串”hello”并不包含字符”y”。<br>[“Alien”, “line”]应该返回true，因为”line”中所有字符都可以在”Alien”找到。<br><figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="keyword">const</span> mutation = <span class="function"><span class="keyword">function</span>(<span class="params">arr</span>)</span>&#123;</div><div class="line">    <span class="keyword">let</span> flag = <span class="number">0</span>,<span class="comment">//变量 后面存储匹配ok的数量</span></div><div class="line">        left = arr[<span class="number">0</span>].toLowerCase(),<span class="comment">// 数组第一个元素</span></div><div class="line">        right = arr[<span class="number">1</span>].toLowerCase();<span class="comment">//数组第二个元素</span></div><div class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;right.length;i++)&#123;</div><div class="line">        <span class="keyword">if</span>(left.indexOf(right[i]) &gt; <span class="number">-1</span>)&#123;</div><div class="line">            <span class="comment">// 匹配即加加</span></div><div class="line">            flag++</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="comment">// 看是否完全匹配</span></div><div class="line">    <span class="keyword">if</span>(flag === right.length)&#123;</div><div class="line">        <span class="keyword">return</span> <span class="literal">true</span></div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="literal">false</span></div><div class="line">&#125;</div><div class="line"><span class="built_in">console</span>.log(mutation([<span class="string">"hello"</span>, <span class="string">"llop"</span>]))</div></pre></td></tr></table></figure></p>
<h2 id="删除数组中特定值算法挑战"><a href="#删除数组中特定值算法挑战" class="headerlink" title="删除数组中特定值算法挑战"></a>删除数组中特定值算法挑战</h2><p>真假美猴王！<br>删除数组中的所有假值。<br>在JavaScript中，假值有false、null、0、””、undefined 和 NaN<br><figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="keyword">const</span> bouncer = <span class="function"><span class="keyword">function</span>(<span class="params">arr</span>)</span>&#123;</div><div class="line">    <span class="keyword">return</span> arr.filter(<span class="function">(<span class="params">item</span>)=&gt;</span>&#123;</div><div class="line">        <span class="keyword">return</span> !!item <span class="comment">// !!返回布尔值 用过滤器过滤出为true值</span></div><div class="line">    &#125;)</div><div class="line">&#125;</div><div class="line"><span class="built_in">console</span>.log(bouncer([<span class="number">1</span>, <span class="literal">null</span>, <span class="literal">NaN</span>, <span class="number">2</span>, <span class="literal">undefined</span>]))</div></pre></td></tr></table></figure></p>
<h2 id="去除数组中任意多个值算法挑战"><a href="#去除数组中任意多个值算法挑战" class="headerlink" title="去除数组中任意多个值算法挑战"></a>去除数组中任意多个值算法挑战</h2><p>实现一个摧毁(destroyer)函数，第一个参数是待摧毁的数组，其余的参数是待摧毁的值。<br><figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="keyword">const</span> destroyer = <span class="function"><span class="keyword">function</span>(<span class="params">data</span>)</span>&#123;</div><div class="line">    <span class="keyword">let</span> arr = <span class="built_in">arguments</span>[<span class="number">0</span>],</div><div class="line">        oData = [].slice.call(<span class="built_in">arguments</span>,<span class="number">1</span>);</div><div class="line"></div><div class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i=<span class="number">0</span>;i&lt;oData.length;i++)&#123;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">let</span> j=<span class="number">0</span>;j&lt;arr.length;j++)&#123;</div><div class="line">            <span class="keyword">if</span>(arr[j] === oData[i])&#123;</div><div class="line">                arr.splice(j,<span class="number">1</span>);</div><div class="line">                j--;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> arr;</div><div class="line">&#125;</div><div class="line"><span class="built_in">console</span>.log(destroyer([<span class="number">3</span>, <span class="number">5</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">2</span>], <span class="number">2</span>, <span class="number">3</span>, <span class="number">5</span>))<span class="comment">// [1]</span></div></pre></td></tr></table></figure></p>
<h2 id="数组排序并插入值算法挑战"><a href="#数组排序并插入值算法挑战" class="headerlink" title="数组排序并插入值算法挑战"></a>数组排序并插入值算法挑战</h2><p>先给数组排序，然后找到指定的值在数组的位置，最后返回位置对应的索引。<br>举例：where([1,2,3,4], 1.5) 应该返回 1。因为1.5插入到数组[1,2,3,4]后变成[1,1.5,2,3,4]，而1.5对应的索引值就是1。<br>同理，where([20,3,5], 19) 应该返回 2。因为数组会先排序为 [3,5,20]，19插入到数组[3,5,20]后变成[3,5,19,20]，而19对应的索引值就是2。<br><figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="keyword">const</span> where = <span class="function"><span class="keyword">function</span> (<span class="params">arr,num</span>) </span>&#123;</div><div class="line">    <span class="comment">// 先合并</span></div><div class="line">    <span class="keyword">let</span> res = arr.concat(num);</div><div class="line">    <span class="comment">// 排序 导出索引</span></div><div class="line">    <span class="keyword">return</span> res.sort(<span class="function"><span class="keyword">function</span>(<span class="params">a,b</span>)</span>&#123;</div><div class="line">        <span class="keyword">return</span> a - b</div><div class="line">    &#125;).indexOf(num)</div><div class="line">&#125;</div><div class="line"><span class="built_in">console</span>.log(where([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>],<span class="number">1.5</span>))<span class="comment">// 1</span></div></pre></td></tr></table></figure></p>
<h2 id="位移密码算法挑战-待补"><a href="#位移密码算法挑战-待补" class="headerlink" title="位移密码算法挑战(待补)"></a>位移密码算法挑战(待补)</h2><p>让上帝的归上帝，凯撒的归凯撒。<br>下面我们来介绍风靡全球的凯撒密码Caesar cipher，又叫移位密码。<br>移位密码也就是密码中的字母会按照指定的数量来做移位。<br>一个常见的案例就是ROT13密码，字母会移位13个位置。由’A’ ↔ ‘N’, ‘B’ ↔’O’，以此类推。<br>写一个ROT13函数，实现输入加密字符串，输出解密字符串。<br>所有的字母都是大写，不要转化任何非字母形式的字符(例如：空格，标点符号)，遇到这些特殊字符，跳过它们。<br>ex:<br>rot13(“SERR PBQR PNZC”) 应该解码为 “FREE CODE CAMP”<br>rot13(“SERR CVMMN!”) 应该解码为 “FREE PIZZA!”<br><figure class="highlight js"><table><tr><td class="code"><pre><div class="line">占位</div></pre></td></tr></table></figure></p>
<h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>大家如何有更好的解决方法或者疑惑，欢迎补充和交流，可以直接联系我biyuqiwan@163.com</p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;http://www.freecodecamp.cn/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;FreeCodeCamp&lt;/a&gt;是一个学习编程的开源社区,里面有面向前端方面的基础知识，也有一些脚本算法相关的
    
    </summary>
    
    
      <category term="javascript" scheme="http://loadingmore.com/tags/javascript/"/>
    
      <category term="算法" scheme="http://loadingmore.com/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>原生JS模拟点击事件和自定义事件</title>
    <link href="http://loadingmore.com/2017/06/11/%E5%8E%9F%E7%94%9FJS%E6%A8%A1%E6%8B%9F%E7%82%B9%E5%87%BB%E4%BA%8B%E4%BB%B6%E5%92%8C%E8%87%AA%E5%AE%9A%E4%B9%89%E4%BA%8B%E4%BB%B6/"/>
    <id>http://loadingmore.com/2017/06/11/原生JS模拟点击事件和自定义事件/</id>
    <published>2017-06-11T08:46:45.000Z</published>
    <updated>2017-06-11T16:46:58.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>事件，就是网页中某个特别值得关注的瞬间，事件是经常有用户操作或通过其他浏览器功能来触发，但是很少有人知道，也可以使用javascript来在任意时刻触发特定事件，此时事件如同浏览器创建的事件一样。 —— 《高级程序设计3》</p>
</blockquote>
<h2 id="高程三的实现方法"><a href="#高程三的实现方法" class="headerlink" title="高程三的实现方法"></a>高程三的实现方法</h2><p>模拟点击事件应该是一个很常见的行为，经常用jQ来实现，今天研究下原生js如何模拟触发点击事件<br><figure class="highlight js"><table><tr><td class="code"><pre><div class="line">&lt;!DOCTYPE html&gt;</div><div class="line"><span class="xml"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span></div><div class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"container"</span>&gt;</span></div><div class="line">            点击</div><div class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></div><div class="line">            <span class="keyword">var</span> doms = <span class="built_in">document</span>.querySelector(<span class="string">'#container'</span>)</div><div class="line">            doms.addEventListener(<span class="string">'click'</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">                <span class="built_in">console</span>.log(<span class="string">"莫名其妙被点击"</span>)</div><div class="line">            &#125;)</div><div class="line">            <span class="comment">// 使用createEvent() 创建event事件 传入鼠标事件字符串 MouseEvents</span></div><div class="line">            <span class="keyword">var</span> events = <span class="built_in">document</span>.createEvent(<span class="string">"MouseEvents"</span>)</div><div class="line">            <span class="comment">// 返回的对象有一个名为 initMouseEvent()方法 用于指定与该鼠标售价仅有关的信息</span></div><div class="line">            events.initMouseEvent(<span class="string">"click"</span>,<span class="literal">true</span>,<span class="literal">true</span>,<span class="built_in">document</span>.defaultView)</div><div class="line">            <span class="comment">// 最后一步触发事件 dispatchEvent()</span></div><div class="line">            doms.dispatchEvent(events)</div><div class="line">        <span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>很遗憾的是，在我查过MDN后，得知该方法已经废弃<br><strong> 注：该特性已经从 Web 标准中删除，虽然一些浏览器目前仍然支持它，但也许会在未来的某个时间停止支持，请尽量不要使用该特性。 </strong></p>
<h2 id="MDN-MouseEvent"><a href="#MDN-MouseEvent" class="headerlink" title="MDN MouseEvent()"></a>MDN MouseEvent()</h2><p>MDN上已经说得很清楚,尽管为了保持向后兼容MouseEvent.initMouseEvent()仍然可用,但是呢,我们应该使用MouseEvent().<br><figure class="highlight js"><table><tr><td class="code"><pre><div class="line">语法：event = <span class="keyword">new</span> MouseEvent(typeArg, mouseEventInit);</div></pre></td></tr></table></figure></p>
<figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="keyword">var</span> doms = <span class="built_in">document</span>.querySelector(<span class="string">'#container'</span>)</div><div class="line">doms.addEventListener(<span class="string">'click'</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">"莫名其妙被点击"</span>)</div><div class="line">&#125;)</div><div class="line"><span class="comment">// 创建模拟对象</span></div><div class="line"><span class="keyword">var</span> events = <span class="keyword">new</span> MouseEvent(<span class="string">"click"</span>,&#123;</div><div class="line">    <span class="attr">bubbles</span>:<span class="literal">true</span>,</div><div class="line">    <span class="attr">cancelable</span>:<span class="literal">true</span>,</div><div class="line">    <span class="attr">view</span>:<span class="built_in">window</span></div><div class="line">&#125;)</div><div class="line"><span class="comment">// 最后一步触发事件 dispatchEvent()</span></div><div class="line">doms.dispatchEvent(events)</div><div class="line"></div><div class="line"><span class="comment">// 至此 我们的自动触发事件已经完成 控制台已经打印：莫名其妙被点击</span></div></pre></td></tr></table></figure>
<table>
<thead>
<tr>
<th>typeArg</th>
<th>DOMString 格式的事件名称。</th>
</tr>
</thead>
<tbody>
<tr>
<td>mouseEventInit</td>
<td>可选</td>
</tr>
</tbody>
</table>
<p>更多的属性请看这里<a href="https://developer.mozilla.org/zh-CN/docs/Web/API/MouseEvent/MouseEvent#浏览器兼容性" target="_blank" rel="external">点击查看</a></p>
<h2 id="IE兼容"><a href="#IE兼容" class="headerlink" title="IE兼容"></a>IE兼容</h2><figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="keyword">var</span> doms = <span class="built_in">document</span>.getElementById(<span class="string">'container'</span>);</div><div class="line"><span class="comment">// 注意低版本ie兼容</span></div><div class="line">doms.attachEvent(<span class="string">'onclick'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">"莫名其妙被点击"</span>)</div><div class="line">&#125;);</div><div class="line"></div><div class="line"><span class="comment">// 创建事件对象</span></div><div class="line"><span class="keyword">var</span> event = <span class="built_in">document</span>.createEventObject()</div><div class="line"><span class="comment">// 触发</span></div><div class="line">doms.fireEvent(<span class="string">'onclick'</span>,event)</div></pre></td></tr></table></figure>
<p>先创建enent对象，然后为其制定相应的信息，然后触发事件<br>fireEvent()方法会自动为event对象添加scrElement和type属性，其他属性都必须手动添加</p>
<h2 id="创建自定义事件"><a href="#创建自定义事件" class="headerlink" title="创建自定义事件"></a>创建自定义事件</h2><p><strong> 自定义事件有两种方法,一种是使用new Event(),另一种是new customEvent() </strong><br><figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="keyword">var</span> doms = <span class="built_in">document</span>.getElementById(<span class="string">'container'</span>);</div><div class="line"><span class="comment">// 创建自定义事件</span></div><div class="line"><span class="keyword">var</span> event = <span class="keyword">new</span> Event(<span class="string">'build'</span>,&#123;</div><div class="line">      <span class="attr">bubbles</span>: <span class="string">'true'</span>,</div><div class="line">      <span class="attr">cancelable</span>: <span class="string">'true'</span></div><div class="line">&#125;);</div><div class="line"></div><div class="line"><span class="comment">// 监听事件</span></div><div class="line">doms.addEventListener(<span class="string">'build'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">"测试自定义事件"</span>)</div><div class="line">&#125;, <span class="literal">false</span>);</div><div class="line"></div><div class="line"><span class="comment">// 触发事件.</span></div><div class="line">doms.dispatchEvent(event);</div><div class="line"><span class="comment">// 控制台</span></div><div class="line"><span class="comment">// 测试自定义事件</span></div></pre></td></tr></table></figure></p>
<figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="keyword">var</span> doms = <span class="built_in">document</span>.getElementById(<span class="string">'container'</span>);</div><div class="line"><span class="comment">// 创建自定义事件</span></div><div class="line"><span class="keyword">var</span> event = <span class="keyword">new</span> CustomEvent(<span class="string">'build'</span>,&#123;</div><div class="line">      <span class="attr">bubbles</span>: <span class="string">'true'</span>, <span class="comment">//一个布尔值,表明该事件是否会冒泡.</span></div><div class="line">      cancelable: <span class="string">'true'</span>, <span class="comment">//一个布尔值,表明该事件是否可以被取消.</span></div><div class="line">      detail:<span class="string">"我是测试数据"</span> <span class="comment">//当事件初始化时传递的数据.</span></div><div class="line">&#125;);</div><div class="line"></div><div class="line"><span class="comment">// 监听事件</span></div><div class="line">doms.addEventListener(<span class="string">'build'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">"测试自定义事件"</span>)</div><div class="line">    <span class="built_in">console</span>.log(e.detail)</div><div class="line">&#125;, <span class="literal">false</span>);</div><div class="line"></div><div class="line"><span class="comment">// 触发事件.</span></div><div class="line">doms.dispatchEvent(event);</div><div class="line"><span class="comment">// 控制台</span></div><div class="line"><span class="comment">// 测试自定义事件</span></div></pre></td></tr></table></figure>
<p>可以很明显的看到,其实new customEvent()比new Event()多了可以在event.detail属性里携带自定义数据的功能</p>
<p>绝大多数现代浏览器中都会支持这个构造函数（Internet Explorer例外）。 要了解更为复杂的方法，可参考下面的 <a href="https://developer.mozilla.org/zh-CN/docs/Web/Guide/Events/Creating_and_triggering_events" target="_blank" rel="external">过时的方法</a>。<br><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/CustomEvent" target="_blank" rel="external">customEvent()</a>和<a href="https://developer.mozilla.org/en-US/docs/Web/API/Event/Event" target="_blank" rel="external"> Event()</a> MDN链接在此</p>
<p>总结下来发现,除了模拟自定义事件比较好用,兼容性还可以，模拟鼠标事件兼容性各方面都支持的不太好，DOM这块水很深啊，继续研究…</p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;事件，就是网页中某个特别值得关注的瞬间，事件是经常有用户操作或通过其他浏览器功能来触发，但是很少有人知道，也可以使用javascript来在任意时刻触发特定事件，此时事件如同浏览器创建的事件一样。 —— 《高级程序设计3》&lt;/p&gt;
&lt;/blockq
    
    </summary>
    
    
      <category term="javascript" scheme="http://loadingmore.com/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title> Vue2.x开发Chrome插件记录</title>
    <link href="http://loadingmore.com/2017/06/04/Vue2-X%E5%BC%80%E5%8F%91Chrome%E6%8F%92%E4%BB%B6%E8%AE%B0%E5%BD%95/"/>
    <id>http://loadingmore.com/2017/06/04/Vue2-X开发Chrome插件记录/</id>
    <published>2017-06-04T13:37:58.000Z</published>
    <updated>2017-06-08T14:39:22.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h3><p>作为一名web开发者,对<a href="https://daneden.github.io/animate.css/" target="_blank" rel="external">Animate.css</a>这个动画库不会陌生,它把常见的动画都封装了起来，非常实用。但是有时候在开发中，仅仅只是需要某一两个动画效果，把整个CSS文件都引入，这样不是太好。<br><a id="more"></a><br>需求就出现了，能不能有一个工具可以直接预览Animate.css对应的动画效果，并且生成对应的动画代码呢？</p>
<p>作为web开发者，平时跟Chrome浏览器打交道最多，于是就想着整一个Chrome插件可以及时预览对应Animate.css中的动画效果并生成对应的动画代码，这样在实际开发中碰到一些需要使用到Animate.css中的动画效果时，可以大大的提高我们的开发效率。</p>
<p>插件如下图所示：<br><img src="http://oq4hkch8e.bkt.clouddn.com/prevcss.gif" alt=""><br><strong> <a href="http://pan.baidu.com/s/1bpozy8J" target="_blank" rel="external">插件下载地址</a> </strong><br><strong> <a href="https://github.com/BiYuqi/v-chrome" target="_blank" rel="external">插件源码</a> </strong><br><strong> <a href="http://loadingmore.com/web-prev-animate/">web网页版本</a> </strong></p>
<h3 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h3><p><strong> Chrome插件开发基本知识 </strong><br>在应用商店中下载下来的插件基本上都是以.crx为文件后缀，该文件其实就是一个压缩包，包括插件所需要的html、css、javascript、图片资源等等文件。</p>
<p>开发一个插件就跟我们平时做web开发流程没多大的区别，就是先搭好基本的页面，然后使用js来写交互逻辑等功能。</p>
<p>比如我这个插件的目录文件如下：<br><img src="http://oq4hkch8e.bkt.clouddn.com/QQ%E6%88%AA%E5%9B%BE20170604220601.png" alt=""></p>
<p><strong> manifest.json文件 </strong><br>文件中需要注意一下的mainfest.json(很重要)这个文件，这个json文件的作用是提供插件的各种信息，例如插件能够做的事情，以及插件的文件配置等等信息。下面是一个清单文件的示例：<br><figure class="highlight js"><table><tr><td class="code"><pre><div class="line">&#123;</div><div class="line">    <span class="string">"manifest_version"</span>: <span class="number">2</span>,</div><div class="line">    <span class="string">"name"</span>: <span class="string">"Prev CSS3 Animate"</span>,</div><div class="line">    <span class="string">"description"</span>: <span class="string">"Preview CSS3 animation effects"</span>,</div><div class="line">    <span class="string">"version"</span>: <span class="string">"1.0"</span>,</div><div class="line">    <span class="string">"content_security_policy"</span>: <span class="string">"script-src 'self' 'unsafe-eval'; object-src 'self'"</span>,</div><div class="line">    <span class="string">"permissions"</span>: [</div><div class="line">        <span class="string">"http://*/*"</span>,</div><div class="line">        <span class="string">"https://*/*"</span>,</div><div class="line">        <span class="string">"file:///*"</span></div><div class="line">     ],</div><div class="line">    <span class="string">"content_scripts"</span>: [</div><div class="line">        &#123;</div><div class="line">            <span class="string">"matches"</span>: [</div><div class="line">                <span class="string">"http://*/*"</span>,</div><div class="line">                <span class="string">"file:///*/*"</span></div><div class="line">            ],</div><div class="line">            <span class="string">"css"</span>: [<span class="string">"dist/style.css"</span>]</div><div class="line">        &#125;</div><div class="line">    ],</div><div class="line">    <span class="string">"browser_action"</span>: &#123;</div><div class="line">        <span class="string">"default_icon"</span>: <span class="string">"img/icon4.png"</span>,</div><div class="line">        <span class="string">"default_popup"</span>: <span class="string">"index.html"</span></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>第一行声明我们使用清单文件格式的版本 2，必须包含（版本 1 是旧的，已弃用，不建议使用）</p>
<p>接下来的部分定义扩展程序的名称、描述与版本。这些都会在 Chrome 浏览器中使用，向用户显示已安装的扩展程序，同时在 Chrome 网上应用店中向潜在的新用户显示您的扩展程序。名称应该简练，描述不要比一句话左右还长</p>
<p>browser_action 对应的是默认的logo(本文是icon4.png)以及文件入口(文本为index.html),这两个资源都必须在扩展程序包中存在，图片是扩展的显示，html是扩展具体运行的基础文件。</p>
<h3 id="功能实现"><a href="#功能实现" class="headerlink" title="功能实现"></a>功能实现</h3><p>整个插件的核心交互功能非常简单，如文章开头的动图所示，用户选择对相应动画，代码区域显示对应的代码。这种简单数据交互使用vuejs再适合不过了，vuejs基础知识这里就不再细说了。可直接拷贝代码</p>
<p>这里需要注意的一点是，chrome 扩展的运行环境有一些特殊要求，称为 Content Security Policy (CSP)，使得通常的 vue 不能被正常使用。如果用的是 vue 1.x，那么可以下载 csp 版本,<strong> <a href="https://github.com/vuejs/vue/tree/csp/dist" target="_blank" rel="external">看这里</a> </strong> 如果是 2.x 版本，请参考官网文档的 <strong> <a href="https://vuefe.cn/v2/guide/installation.html#CSP-环境" target="_blank" rel="external">这一段</a> </strong></p>
<p>其实2.x解决cps问题很简单，只需要在manifest.json里面加入这样一行即可随意使用2.x版本的Vue<br><figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="string">"content_security_policy"</span>: <span class="string">"script-src 'self' 'unsafe-eval'; object-src 'self'"</span></div></pre></td></tr></table></figure></p>
<p>核心代码：<br><figure class="highlight html"><table><tr><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0"</span>&gt;</span></div><div class="line">        <span class="comment">&lt;!-- 因为使用的webpack 所以直接饮用了打包后的文件 --&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">href</span>=<span class="string">"dist/style.css"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app-prev-css"</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"header"</span>&gt;</span>Prev CSS3 Animate.css<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"prev-box"</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">:class</span>=<span class="string">"[activeClass, errorClass]"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"select-line"</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">select</span> <span class="attr">v-model</span>=<span class="string">"selected"</span>&gt;</span></div><div class="line">                    <span class="tag">&lt;<span class="name">option</span> <span class="attr">v-for</span>=<span class="string">"(option,index) in options"</span> <span class="attr">:value</span>=<span class="string">"option"</span>&gt;</span>&#123;&#123;option&#125;&#125;<span class="tag">&lt;/<span class="name">option</span>&gt;</span></div><div class="line">                <span class="tag">&lt;/<span class="name">select</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"button"</span> @<span class="attr">click</span>=<span class="string">"copyTips"</span> <span class="attr">class</span>=<span class="string">"copy-btn"</span> <span class="attr">data-clipboard-target</span>=<span class="string">"#copyCss"</span>&gt;</span>复制<span class="tag">&lt;/<span class="name">button</span>&gt;</span></div><div class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"prev-css"</span> <span class="attr">v-html</span>=<span class="string">"cssText"</span> <span class="attr">id</span>=<span class="string">"copyCss"</span> <span class="attr">v-cloak</span>&gt;</span>&#123;&#123;cssText&#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"tips"</span> <span class="attr">v-show</span>=<span class="string">"isShow"</span> <span class="attr">v-cloak</span>&gt;</span>复制成功！<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">        <span class="comment">&lt;!-- 因为使用的webpack 所以直接饮用了打包后的文件 --&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"dist/bundle.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>CSS就不列出来了，可以在源代码中查看。</p>
<p>下面来使用vuejs来实现插件的功能。<br><figure class="highlight html"><table><tr><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">v-model</span>=<span class="string">"selected"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">option</span> <span class="attr">v-for</span>=<span class="string">"(option,index) in options"</span> <span class="attr">:value</span>=<span class="string">"option"</span>&gt;</span>&#123;&#123;option&#125;&#125;<span class="tag">&lt;/<span class="name">option</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>使用 v-for 指令进行列表渲染。</p>
<p>用v-bind方法来绑定option的value值</p>
<p>在select中使用v-model方法来监听选中的值</p>
<figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="keyword">new</span> Vue(&#123;</div><div class="line">    <span class="attr">el</span>:<span class="string">"#app-prev-css"</span>,</div><div class="line">    data () &#123;</div><div class="line">        <span class="keyword">return</span> &#123;</div><div class="line">            <span class="attr">selected</span>:<span class="string">'bounce'</span>,</div><div class="line">            <span class="attr">activeClass</span>: <span class="string">'animated'</span>,</div><div class="line">            <span class="attr">errorClass</span>: <span class="string">'bounce'</span>,</div><div class="line">            <span class="attr">isShow</span>:<span class="literal">false</span>,</div><div class="line">            <span class="attr">options</span>:[</div><div class="line">                <span class="string">'bounce'</span>,<span class="string">'flash'</span>,<span class="string">'pulse'</span>,<span class="string">'rubberBand'</span>,<span class="string">'shake'</span>,<span class="string">'headShake'</span>,<span class="string">'swing'</span>,<span class="string">'tada'</span>,<span class="string">'wobble'</span>,<span class="string">'jello'</span>,</div><div class="line">                <span class="string">'bounceIn'</span>,<span class="string">'bounceInDown'</span>,<span class="string">'bounceInLeft'</span>,<span class="string">'bounceInRight'</span>,<span class="string">'bounceInUp'</span>,</div><div class="line">                <span class="string">'bounceOut'</span>,<span class="string">'bounceOutDown'</span>,<span class="string">'bounceOutLeft'</span>,<span class="string">'bounceOutRight'</span>,<span class="string">'bounceOutUp'</span>,</div><div class="line">                <span class="string">'fadeIn'</span>,<span class="string">'fadeInDown'</span>,<span class="string">'fadeInDownBig'</span>,<span class="string">'fadeInLeft'</span>,<span class="string">'fadeInLeftBig'</span>,<span class="string">'fadeInRight'</span>,</div><div class="line">                <span class="string">'fadeInRightBig'</span>,<span class="string">'fadeInUp'</span>,<span class="string">'fadeInUpBig'</span>,<span class="string">'fadeOut'</span>,<span class="string">'fadeOutDown'</span>,<span class="string">'fadeOutDownBig'</span>,</div><div class="line">                <span class="string">'fadeOutLeft'</span>,<span class="string">'fadeOutLeftBig'</span>,<span class="string">'fadeOutRight'</span>,<span class="string">'fadeOutRightBig'</span>,<span class="string">'fadeOutUp'</span>,<span class="string">'fadeOutUpBig'</span>,</div><div class="line">                <span class="string">'flip'</span>,<span class="string">'flipInX'</span>,<span class="string">'flipInY'</span>,<span class="string">'flipOutX'</span>,<span class="string">'flipOutY'</span>,<span class="string">'lightSpeedIn'</span>,<span class="string">'lightSpeedOut'</span>,</div><div class="line">                <span class="string">'rotateIn'</span>,<span class="string">'rotateInDownLeft'</span>,<span class="string">'rotateInDownRight'</span>,<span class="string">'rotateInUpLeft'</span>,<span class="string">'rotateInUpRight'</span>,</div><div class="line">                <span class="string">'rotateOut'</span>,<span class="string">'rotateOutDownLeft'</span>,<span class="string">'rotateOutDownRight'</span>,<span class="string">'rotateOutUpLeft'</span>,<span class="string">'rotateOutUpRight'</span>,</div><div class="line">                <span class="string">'slideInUp'</span>,<span class="string">'slideInDown'</span>,<span class="string">'slideInLeft'</span>,<span class="string">'slideInRight'</span>,<span class="string">'slideOutUp'</span>,<span class="string">'slideOutDown'</span>,<span class="string">'slideOutLeft'</span>,</div><div class="line">                <span class="string">'slideOutRight'</span>,<span class="string">'zoomIn'</span>,<span class="string">'zoomInDown'</span>,<span class="string">'zoomInLeft'</span>,<span class="string">'zoomInRight'</span>,<span class="string">'zoomInUp'</span>,</div><div class="line">                <span class="string">'zoomOut'</span>,<span class="string">'zoomOutDown'</span>,<span class="string">'zoomOutLeft'</span>,<span class="string">'zoomOutRight'</span>,<span class="string">'zoomOutUp'</span>,<span class="string">'hinge'</span>,<span class="string">'rollIn'</span>,<span class="string">'rollOut'</span></div><div class="line">            ]</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<h3 id="代码同步显示"><a href="#代码同步显示" class="headerlink" title="代码同步显示"></a>代码同步显示</h3><p>接下来是代码同步功能，即在代码区域显示对应animate对齐的CSS代码。</p>
<p>这里我们用vuejs中的computed属性方法来返回数据<br><figure class="highlight js"><table><tr><td class="code"><pre><div class="line">computed:&#123;</div><div class="line">    cssText () &#123;</div><div class="line">        <span class="comment">// 数据我单独放在json里面了 返回对应名字动画即可</span></div><div class="line">        <span class="keyword">var</span>  baseData = data[<span class="keyword">this</span>.selected]</div><div class="line"></div><div class="line">        <span class="comment">// 处理数据 优化显示方式 换行 缩进代码 使用了showdown =&gt; html</span></div><div class="line">        <span class="keyword">var</span> converter =  <span class="keyword">new</span> showdown.Converter(&#123;</div><div class="line">          <span class="attr">tables</span>: <span class="literal">true</span></div><div class="line">        &#125;);</div><div class="line">        baseData = converter.makeHtml(baseData);</div><div class="line"></div><div class="line">        baseData = baseData.replace(<span class="regexp">/(.*?)gs/g</span>,<span class="string">"&lt;div&gt;$1&lt;/div&gt;"</span>)</div><div class="line">        baseData = baseData.replace(<span class="regexp">/&lt;p&gt;|&lt;\/p&gt;/g</span>,<span class="string">""</span>)</div><div class="line">        baseData = baseData.replace(<span class="regexp">/\b(sp)\b/g</span>,<span class="string">"&lt;span class='space'&gt;&lt;/span&gt;"</span>)</div><div class="line">        baseData = baseData.replace(<span class="regexp">/\b(sp2)\b/g</span>,<span class="string">"&lt;span class='space2'&gt;&lt;/span&gt;"</span>)</div><div class="line">        <span class="comment">// 返回</span></div><div class="line">        <span class="keyword">return</span> baseData</div><div class="line">    &#125;</div><div class="line">&#125;,</div></pre></td></tr></table></figure></p>
<h3 id="复制代码"><a href="#复制代码" class="headerlink" title="复制代码"></a>复制代码</h3><p>使用了Clipboard插件,具体使用方法<a href="https://github.com/zenorocha/clipboard.js" target="_blank" rel="external">github地址看这里</a><br><figure class="highlight html"><table><tr><td class="code"><pre><div class="line"><span class="comment">&lt;!-- 点击按钮绑定 data-clipboard-target="#copyCss" --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"button"</span> @<span class="attr">click</span>=<span class="string">"copyTips"</span> <span class="attr">class</span>=<span class="string">"copy-btn"</span> <span class="attr">data-clipboard-target</span>=<span class="string">"#copyCss"</span>&gt;</span>复制<span class="tag">&lt;/<span class="name">button</span>&gt;</span></div><div class="line"></div><div class="line"><span class="comment">&lt;!-- 代码区域使用 id copyCss--&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"prev-css"</span> <span class="attr">v-html</span>=<span class="string">"cssText"</span> <span class="attr">id</span>=<span class="string">"copyCss"</span> <span class="attr">v-cloak</span>&gt;</span>&#123;&#123;cssText&#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>接下来就是js<br><figure class="highlight js"><table><tr><td class="code"><pre><div class="line">mounted:<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">this</span>.$nextTick(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">        <span class="keyword">new</span> Clipboard(<span class="string">'.copy-btn'</span>);</div><div class="line">    &#125;)</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>开发好之后，可以直接在chrome中运行来调试。打开扩展面板，勾选开发者模式，然后加载刚开发扩展所在的目录就可以直接运行</p>
<p>一个简单的插件就完成了，通过这一个简单的chrome插件就可以体验到vuejs在web开发中简单、优雅的魅力，还有什么理由不用起来呢。</p>
<p><img src="http://oq4hkch8e.bkt.clouddn.com/QQ%E6%88%AA%E5%9B%BE201.png" alt=""></p>
<p><img src="http://oq4hkch8e.bkt.clouddn.com/QQ%E6%88%AA%E5%9B%BE20170604223202.png" alt=""></p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;背景&lt;/h3&gt;&lt;p&gt;作为一名web开发者,对&lt;a href=&quot;https://daneden.github.io/animate.css/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Animate.css&lt;/a&gt;这个动画库不会陌生,它把常见的动画都封装了起来，非常实用。但是有时候在开发中，仅仅只是需要某一两个动画效果，把整个CSS文件都引入，这样不是太好。&lt;br&gt;
    
    </summary>
    
    
      <category term="Vue" scheme="http://loadingmore.com/tags/Vue/"/>
    
      <category term="chrome插件" scheme="http://loadingmore.com/tags/chrome%E6%8F%92%E4%BB%B6/"/>
    
  </entry>
  
  <entry>
    <title>学习下如何优雅的写表单验证</title>
    <link href="http://loadingmore.com/2017/05/14/%E5%AD%A6%E4%B9%A0%E4%B8%8B%E5%A6%82%E4%BD%95%E4%BC%98%E9%9B%85%E7%9A%84%E5%86%99%E8%A1%A8%E5%8D%95%E9%AA%8C%E8%AF%81/"/>
    <id>http://loadingmore.com/2017/05/14/学习下如何优雅的写表单验证/</id>
    <published>2017-05-14T11:44:53.000Z</published>
    <updated>2017-06-08T13:41:12.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>最近项目挺赶,博客许久没更新(借口~),周末充下电,表单是一个项目中必不可少的模块了，像注册，登录等。学习下解决下工作中关于表单验证这块的问题</p>
</blockquote>
<a id="more"></a>
<h3 id="DEMO"><a href="#DEMO" class="headerlink" title="DEMO"></a>DEMO</h3><p>demo源码可能与博客有些略微不同(但是核心思想一模一样)<br><a href="http://loadingmore.com/demo/src/html/form-opt.html">线上案例</a></p>
<h3 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h3><p>看看平时我写表单的代码风格吧(求轻喷~)<br><figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line"><span class="keyword">if</span>(userName.value === <span class="string">''</span>)&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">"姓名不为空"</span>);</div><div class="line">    <span class="keyword">return</span>;</div><div class="line">&#125;</div><div class="line"><span class="keyword">if</span>(!reg.test(userName.value))&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">"姓名不合格"</span>);</div><div class="line">    <span class="keyword">return</span>;</div><div class="line">&#125;</div><div class="line"><span class="keyword">if</span>(userPass.value === <span class="string">''</span>)&#123;</div><div class="line">    <span class="comment">//.........</span></div><div class="line">&#125;</div><div class="line"><span class="keyword">if</span>(userPass.value !=== reUserPass.value)&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">"密码不一致"</span>);</div><div class="line">    <span class="keyword">return</span>;</div><div class="line">&#125;</div><div class="line"><span class="keyword">if</span>(mobile.value === <span class="string">''</span>)&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">"手机号码不能为空"</span>);</div><div class="line">    <span class="keyword">return</span>;</div><div class="line">&#125;</div><div class="line"><span class="comment">//此处略去n多if-esle</span></div></pre></td></tr></table></figure></p>
<p>这样编写代码对于实现业务需求来说是没有问题的，但是总觉得哪里怪怪的:</p>
<blockquote>
<ul>
<li>我有密集恐惧症，那么多的if-else看着怪恶心的</li>
<li>验证的规则复用性太差了,哪里需要，只是拷贝来，粘贴过去,飞来飞去</li>
<li>这样的代码容易被喷，不容易维护</li>
</ul>
</blockquote>
<h3 id="怎么解决呢"><a href="#怎么解决呢" class="headerlink" title="怎么解决呢"></a>怎么解决呢</h3><p>假如我们不想使用那么多的if语句，那么你心中理想的验证表单的方式是什么呢？写一系列规则，最后一步验证，这样写起来很嗨吧<br><figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line"><span class="comment">// 首页获取form元素</span></div><div class="line"><span class="keyword">var</span> registerForm = <span class="built_in">document</span>.querySelector(<span class="string">'#re-form'</span>);</div><div class="line"></div><div class="line"><span class="comment">// 创建实例</span></div><div class="line"><span class="keyword">var</span> validator = <span class="keyword">new</span> Validator();</div><div class="line"></div><div class="line">validator.add(registerForm.userName,<span class="string">'isEmpty'</span>,<span class="string">'用户名不能为空'</span>);</div><div class="line">validator.add(registerForm.userPass,<span class="string">'minLength:6'</span>,<span class="string">'密码至少六位'</span>);</div><div class="line"></div><div class="line"><span class="comment">//校验信息</span></div><div class="line"><span class="keyword">var</span> errorMsg = validator.start();</div><div class="line"></div><div class="line"><span class="keyword">if</span>(errorMsg)&#123;</div><div class="line">    <span class="built_in">console</span>.log(errorMsg);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>如果能这样写那就太爽了,很优雅,很方便,下一步需要了解下什么是策略模式</p>
<h3 id="策略模式"><a href="#策略模式" class="headerlink" title="策略模式"></a>策略模式</h3><p>所谓策略就是做事情的方法,好比玩三国杀，每个人都有自己的技能，每个人物都有自己的制胜策略;比如去旅游,就有很多种路线供你选择，要么坐飞机，要么坐高铁，要么徒步;</p>
<p>所以，做一件事情会有很多种方法,接下来编码也会以这种方式进行;核心思想是，将要做什么和谁去做进行分离。一个完整的策略需要两个类：策略类,环境类;环境类接收请求，但不处理请求，它会把请求委托给策略类，让策略类去处理，而策略类的扩展是很容易的，这样，使得我们的代码易于扩展。<br>在表单验证的例子中，各种验证的方法组成了策略类，比如：判断是否为空的方法(如：isNonEmpty)，判断最小长度的方法(如：minLength)，判断是否为手机号的方法(isMoblie)等等，他们组成了策略类，供给环境类去委托请求。下面，我们就来实战一下。</p>
<h3 id="策略类"><a href="#策略类" class="headerlink" title="策略类"></a>策略类</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line"><span class="comment">// 完成我们的策略表 (自由定制)</span></div><div class="line"><span class="keyword">var</span> ruleList = &#123;</div><div class="line">    <span class="comment">//验证为空</span></div><div class="line">    isEmpoty: <span class="function"><span class="keyword">function</span>(<span class="params">value,errorMsg</span>)</span>&#123;</div><div class="line">        <span class="keyword">if</span>(value == <span class="string">''</span>)&#123;</div><div class="line">            <span class="keyword">return</span> errorMsg;</div><div class="line">        &#125;</div><div class="line">    &#125;,</div><div class="line">    <span class="comment">//验证最小长度</span></div><div class="line">    minLength: <span class="function"><span class="keyword">function</span>(<span class="params">value,len,errorMsg</span>)</span>&#123;</div><div class="line">        <span class="keyword">if</span>(value.length &lt; len)&#123;</div><div class="line">            <span class="keyword">return</span> errorMsg;</div><div class="line">        &#125;</div><div class="line">    &#125;,</div><div class="line">    <span class="comment">//验证手机号</span></div><div class="line">    isMobile: <span class="function"><span class="keyword">function</span>(<span class="params">value,errorMsg</span>)</span>&#123;</div><div class="line">        <span class="keyword">if</span>(!<span class="regexp">/^1\d&#123;10&#125;$/</span>.test(value))&#123;</div><div class="line">            <span class="keyword">return</span> errorMsg;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<h3 id="环境类"><a href="#环境类" class="headerlink" title="环境类"></a>环境类</h3><p>根据之前的畅想：<br><figure class="highlight js"><table><tr><td class="code"><pre><div class="line">validator.add(registerForm.userName,<span class="string">'isEmpty'</span>,<span class="string">'用户名不能为空'</span>);</div><div class="line">validator.add(registerForm.userName,<span class="string">'isMobile'</span>,<span class="string">'手机号码有误'</span>);</div></pre></td></tr></table></figure></p>
<p>我们可能需要创建一个类，类里面有两个方法 add()add()接收三个参数，第一个是表单字段(校验对象),第二个是策略方法名字,使用冒号(:)分隔，亲一个是方法名字，后一个是传给该方法的参数(如长度),第三个是验证不通过的返回信息;<br>然后用start方法进行验证：<br><figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="keyword">var</span> errorMsg = validation.start();</div></pre></td></tr></table></figure></p>
<p>但是这种参数配置还是有问题，我们的要求是多种校验规则，比如用户名既不能为空，又要满足用户名长度不小于6，并不是单一的，上面的为什么要写两次，这种看着就不舒服，这时候我就需要对配置参数做一点小小的改动，我们用数组来传递多个校验规则：<br><figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="comment">//最终实现</span></div><div class="line">validator.add(registerForm.username, [&#123;</div><div class="line">    <span class="attr">strategy</span>: <span class="string">'isEmpty'</span>,</div><div class="line">    <span class="attr">errorMsg</span>: <span class="string">'用户名不能为空！'</span></div><div class="line">&#125;, &#123;</div><div class="line">    <span class="attr">strategy</span>: <span class="string">'minLength:6'</span>,</div><div class="line">    <span class="attr">errorMsg</span>: <span class="string">'用户名长度不能小于6位！'</span></div><div class="line">&#125;])</div></pre></td></tr></table></figure></p>
<h3 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h3><figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="keyword">var</span> FormValidator = <span class="function"><span class="keyword">function</span>(<span class="params">ruleList</span>)</span>&#123;</div><div class="line">    <span class="comment">//保存策略规则列表</span></div><div class="line">    <span class="keyword">this</span>.strategies = ruleList;</div><div class="line">    <span class="comment">//储存规则方法</span></div><div class="line">    <span class="keyword">this</span>.validationFns = [];</div><div class="line">&#125;;</div><div class="line">FormValidator.prototype = &#123;</div><div class="line">    <span class="attr">add</span>:<span class="function"><span class="keyword">function</span>(<span class="params">dom,rule</span>)</span>&#123;</div><div class="line">        <span class="keyword">var</span> that = <span class="keyword">this</span>;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;rule.length;i++)&#123;</div><div class="line">            <span class="comment">// 这里使用闭包储存i 动态添加方法</span></div><div class="line">            (<span class="function"><span class="keyword">function</span>(<span class="params">i</span>)</span>&#123;</div><div class="line">                <span class="comment">//</span></div><div class="line">                that.validationFns.push(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">                    <span class="comment">/*</span></div><div class="line">                    * aryNames 规则名字(包含传的参数minLeng:6) 所以需要动态的解析</div><div class="line">                    * errorMsg 错误信息</div><div class="line">                    * rulename 方法名字</div><div class="line">                    * dataArr 储存参数 value method名字 错误信息</div><div class="line">                    * strategies 使用apply 向指定方法传参数</div><div class="line">                     */</div><div class="line">                    <span class="keyword">var</span> aryNames = rule[i].strategy.split(<span class="string">':'</span>),</div><div class="line">                        errorMsg = rule[i].errorMsg,</div><div class="line">                        rulename = aryNames[<span class="number">0</span>],</div><div class="line">                        dataArr = [];</div><div class="line">                        dataArr.push(dom.value);</div><div class="line">                        <span class="keyword">if</span>(aryNames[<span class="number">1</span>])&#123;</div><div class="line">                            dataArr.push(aryNames[<span class="number">1</span>]);</div><div class="line">                        &#125;</div><div class="line">                        dataArr.push(errorMsg);</div><div class="line">                    <span class="keyword">return</span> that.strategies[rulename].apply(dom,dataArr);</div><div class="line">                &#125;)</div><div class="line">            &#125;)(i)</div><div class="line">        &#125;</div><div class="line">    &#125;,</div><div class="line">    <span class="attr">start</span>:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">        <span class="keyword">var</span> that = <span class="keyword">this</span>;</div><div class="line">        <span class="comment">// 遍历规则集合 抛出错误</span></div><div class="line">        <span class="keyword">for</span>(i <span class="keyword">in</span> that.validationFns)&#123;</div><div class="line">            <span class="keyword">var</span> msg = that.validationFns[i]();</div><div class="line">            <span class="keyword">if</span>(msg)&#123;</div><div class="line">                <span class="keyword">return</span> msg;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<p><strong> 规则集合</strong><br><figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="comment">// 规则集合</span></div><div class="line"><span class="keyword">var</span> rules = &#123;</div><div class="line">    <span class="comment">//验证为空</span></div><div class="line">    isEmpoty: <span class="function"><span class="keyword">function</span>(<span class="params">value,errorMsg</span>)</span>&#123;</div><div class="line">        <span class="keyword">if</span>(value == <span class="string">''</span>)&#123;</div><div class="line">            <span class="keyword">return</span> errorMsg;</div><div class="line">        &#125;</div><div class="line">    &#125;,</div><div class="line">    <span class="comment">//验证最小长度</span></div><div class="line">    minLength: <span class="function"><span class="keyword">function</span>(<span class="params">value,len,errorMsg</span>)</span>&#123;</div><div class="line">        <span class="keyword">if</span>(value.length &lt; len)&#123;</div><div class="line">            <span class="keyword">return</span> errorMsg;</div><div class="line">        &#125;</div><div class="line">    &#125;,</div><div class="line">    <span class="comment">//验证手机号</span></div><div class="line">    isMobile: <span class="function"><span class="keyword">function</span>(<span class="params">value,errorMsg</span>)</span>&#123;</div><div class="line">        <span class="keyword">if</span>(!<span class="regexp">/^1\d&#123;10&#125;$/</span>.test(value))&#123;</div><div class="line">            <span class="keyword">return</span> errorMsg;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
<p><strong> 客户端调用代码方法</strong><br><figure class="highlight html"><table><tr><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">id</span>=<span class="string">"submit"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">class</span>=<span class="string">"username"</span> <span class="attr">name</span>=<span class="string">"username"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">class</span>=<span class="string">"userpass"</span> <span class="attr">name</span>=<span class="string">"userpass"</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"btn"</span>&gt;</span>提交<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure></p>
<figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="keyword">var</span> forms = <span class="built_in">document</span>.querySelector(<span class="string">'#submit'</span>);</div><div class="line"><span class="keyword">var</span> btn = <span class="built_in">document</span>.querySelector(<span class="string">'.btn'</span>);</div><div class="line"></div><div class="line"><span class="comment">// 构造函数 传入规则</span></div><div class="line"><span class="keyword">var</span> validation = <span class="keyword">new</span> FormValidator(rules);</div><div class="line"><span class="comment">// 直接调用规则方法即可 返回错误信息</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">getErrorMsg</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="comment">// 直接调用规则方法即可</span></div><div class="line">    validation.add(forms.username,[</div><div class="line">        &#123;</div><div class="line">            <span class="attr">strategy</span>:<span class="string">'isEmpoty'</span>, <span class="comment">//strategy 为固定字段</span></div><div class="line">            errorMsg:<span class="string">'用户名不能为空'</span> <span class="comment">//errorMsg 为固定字段</span></div><div class="line">        &#125;,</div><div class="line">        &#123;</div><div class="line">            <span class="attr">strategy</span>:<span class="string">'minLength:6'</span>,</div><div class="line">            <span class="attr">errorMsg</span>:<span class="string">'用户名长度最低6位'</span></div><div class="line">        &#125;</div><div class="line">    ]);</div><div class="line">    validation.add(forms.userpass,[</div><div class="line">        &#123;</div><div class="line">            <span class="attr">strategy</span>:<span class="string">'isMobile'</span>,</div><div class="line">            <span class="attr">errorMsg</span>:<span class="string">'手机号码有误'</span></div><div class="line">        &#125;</div><div class="line">    ]);</div><div class="line"></div><div class="line">    <span class="keyword">var</span> error = validation.start();</div><div class="line">    <span class="keyword">return</span> error;</div><div class="line">&#125;</div><div class="line"><span class="comment">// 点击事件</span></div><div class="line">btn.addEventListener(<span class="string">'click'</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="keyword">var</span> msg = getErrorMsg();</div><div class="line">    <span class="keyword">if</span>(msg)&#123;</div><div class="line">        <span class="built_in">console</span>.log(msg)<span class="comment">//错误提示</span></div><div class="line">    &#125;<span class="keyword">else</span>&#123;</div><div class="line">        <span class="comment">//在此提交数据</span></div><div class="line">    &#125;</div><div class="line">&#125;,<span class="literal">false</span>)</div></pre></td></tr></table></figure>
<p>在修改某个校验规则的时候，只需要编写或者改写少量的代码。比如我们想要将用户名输入框的校验规则改成用户名不能少于4个字符。可以看到，这时候的修改是毫不费力的。代码如下：<br><figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="comment">// 更具体的方法 可以在rules中修改</span></div><div class="line">validation.add(forms.username, [&#123;</div><div class="line">        <span class="attr">strategy</span>: <span class="string">'isNonEmpty'</span>,</div><div class="line">        <span class="attr">errorMsg</span>: <span class="string">'用户名不能为空！'</span></div><div class="line">    &#125;, &#123;</div><div class="line">        <span class="attr">strategy</span>: <span class="string">'minLength:4'</span>,</div><div class="line">        <span class="attr">errorMsg</span>: <span class="string">'用户名长度不能小于4位！'</span></div><div class="line">    &#125;])</div></pre></td></tr></table></figure></p>
<p>参考：<br><a href="http://hcysun.me/2016/02/21/%E7%AD%96%E7%95%A5%E6%A8%A1%E5%BC%8F%E5%9C%A8%E8%A1%A8%E5%8D%95%E9%AA%8C%E8%AF%81%E4%B8%AD%E7%9A%84%E5%BA%94%E7%94%A8/" target="_blank" rel="external">策略模式在表单中的应用</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;最近项目挺赶,博客许久没更新(借口~),周末充下电,表单是一个项目中必不可少的模块了，像注册，登录等。学习下解决下工作中关于表单验证这块的问题&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="Javascript" scheme="http://loadingmore.com/categories/Javascript/"/>
    
    
      <category term="javascript" scheme="http://loadingmore.com/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>JS字符串常用方法总结</title>
    <link href="http://loadingmore.com/2017/04/22/Javascript%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%B8%B8%E7%94%A8%E6%96%B9%E6%B3%95%E6%80%BB%E7%BB%93/"/>
    <id>http://loadingmore.com/2017/04/22/Javascript字符串常用方法总结/</id>
    <published>2017-04-22T13:54:07.000Z</published>
    <updated>2017-04-22T15:56:08.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>周末温习高程三,摘录读书笔记</p>
</blockquote>
<h3 id="字符方法"><a href="#字符方法" class="headerlink" title="字符方法"></a>字符方法</h3><ul>
<li>charAt()</li>
<li>charCodeAt()</li>
</ul>
<a id="more"></a>
<p>都接收一个参数，区别是chartAt()方法以单独字符串形式返回给定位置的字符<br>eg:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="keyword">var</span> str = <span class="string">'hello world'</span>;</div><div class="line">alert(str.charAt(<span class="number">1</span>))<span class="comment">//e</span></div></pre></td></tr></table></figure>
<p>如果你想得到的不是字符而是编码那就需要charCodeAt():<br><figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="keyword">var</span> str2 = <span class="string">'hello world'</span>;</div><div class="line">alert(str2.charCodeAt(<span class="number">1</span>))<span class="comment">//101  小写字母e的字符编码</span></div></pre></td></tr></table></figure></p>
<p>注：ECMAScript5中还定义了可以用[Number]的方式访问字符串中特定字符;IE8+</p>
<h3 id="字符串操作方法"><a href="#字符串操作方法" class="headerlink" title="字符串操作方法"></a>字符串操作方法</h3><ul>
<li>concat()</li>
<li>slice()</li>
<li>substr()</li>
<li>substring()</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="comment">//concat() //顾名思义用来拼接一个或多个字符</span></div><div class="line"><span class="keyword">var</span> str = <span class="string">'hello'</span>;</div><div class="line"><span class="keyword">var</span> str0 = str.concat(<span class="string">'world'</span>);</div><div class="line"><span class="built_in">console</span>.log(str0)<span class="comment">//'hello world'</span></div><div class="line"><span class="built_in">console</span>.log(str)<span class="comment">//'hello'</span></div><div class="line"><span class="comment">//实践中还是用+号操作符的拼接字符串的场景多，这里只做演示</span></div></pre></td></tr></table></figure>
<p>后面三个字符 substr slice substring 第一个是开始位置 区别在于第二个字符<br>slice substring 第二个是位置(不包含)<br>substr 第二个参数是个数，即返回字符的个数,没有第二个参数,意味着从第一个参数起,返回所有<br><figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="keyword">var</span> str = <span class="string">'biyuqi'</span>;</div><div class="line"><span class="built_in">console</span>.log(str.slice(<span class="number">0</span>))   <span class="comment">//biyuqi</span></div><div class="line"><span class="built_in">console</span>.log(str.slice(<span class="number">1</span>,<span class="number">3</span>)) <span class="comment">//iy</span></div><div class="line"></div><div class="line"><span class="built_in">console</span>.log(str.substring(<span class="number">0</span>))   <span class="comment">//biyuqi</span></div><div class="line"><span class="built_in">console</span>.log(str.substring(<span class="number">1</span>,<span class="number">3</span>)) <span class="comment">//iy</span></div><div class="line"></div><div class="line"><span class="built_in">console</span>.log(str.substr(<span class="number">0</span>))   <span class="comment">//biyuqi</span></div><div class="line"><span class="built_in">console</span>.log(str.substr(<span class="number">1</span>,<span class="number">3</span>)) <span class="comment">//iyu 不包含3 数量3</span></div></pre></td></tr></table></figure></p>
<h3 id="字符串位置的方法"><a href="#字符串位置的方法" class="headerlink" title="字符串位置的方法"></a>字符串位置的方法</h3><p>与数组方法类似,返回字符串的位置(如果没有找到该字符,则返回-1),区别在于indexOf从字符串开始向后搜索,lastIndex相反</p>
<ul>
<li>indexOf()</li>
<li>lastIndexOf()</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="keyword">var</span> str = <span class="string">'hello world'</span>;</div><div class="line"><span class="built_in">console</span>.log(str.indexOf(<span class="string">'o'</span>)) <span class="comment">//4</span></div><div class="line"><span class="built_in">console</span>.log(str.lastIndexOf(<span class="string">'o'</span>)) <span class="comment">//7</span></div><div class="line"><span class="built_in">console</span>.log(str.indexOf(<span class="string">'m'</span>)) <span class="comment">//-1</span></div><div class="line"></div><div class="line"><span class="comment">//判断重复字符</span></div><div class="line"><span class="comment">//a 测试变量</span></div><div class="line"><span class="keyword">if</span>(str.indexOf(a) === str.lastIndexOf(a))&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">"没有重复字符"</span>)</div><div class="line">&#125;<span class="keyword">else</span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">"有重复字符"</span>)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="trim-方法"><a href="#trim-方法" class="headerlink" title="trim()方法"></a>trim()方法</h3><p>ECMAScipr5为所有字符定义了trim()方法,去除字符前后所有空格<br><figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="keyword">var</span> str = <span class="string">' hello,sorld '</span>;</div><div class="line"><span class="built_in">console</span>.log(str.trim()) <span class="comment">//'hello sorld'</span></div><div class="line"></div><div class="line"><span class="comment">// trim() 仅支持IE9+</span></div><div class="line"><span class="comment">//so 兼容方法</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">trim</span>(<span class="params">s</span>)</span>&#123;</div><div class="line">    <span class="keyword">var</span> reg = <span class="regexp">/(^\s*)|(\s*$)/g</span>;</div><div class="line">    <span class="keyword">return</span> s.replace(reg,<span class="string">''</span>)</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="字符串模式匹配方法"><a href="#字符串模式匹配方法" class="headerlink" title="字符串模式匹配方法"></a>字符串模式匹配方法</h3><p><strong> match()接收一个参数,要么是一个正则表达式,要么是一个RegExp对象</strong></p>
<ul>
<li>match() //与正则exec()方法类似</li>
<li>replace()</li>
</ul>
<p>返回一个数组,数组第一项与整个是与整个模式配的字符串,之后的每一项(如果有)保存着与正则表达式中的捕获组匹配的字符串,没有匹配则返回null</p>
<figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="keyword">var</span> string = <span class="string">'biyui,sdf,sdfsdf'</span></div><div class="line"><span class="keyword">var</span> reg = <span class="regexp">/(.),/</span>;</div><div class="line"><span class="built_in">console</span>.log(string.match(reg))</div></pre></td></tr></table></figure>
<p><img src="http://oj7j5nuxv.bkt.clouddn.com/match-v.png" alt=""></p>
<p>全匹配时返回匹配数组,没有匹配则返回null<br><figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="keyword">var</span> string = <span class="string">'biyui,sdf,sdfsdf'</span></div><div class="line"><span class="keyword">var</span> reg = <span class="regexp">/(.),/g</span>;</div><div class="line"><span class="built_in">console</span>.log(string.match(reg))</div></pre></td></tr></table></figure></p>
<p><img src="http://oj7j5nuxv.bkt.clouddn.com/match-val.png" alt=""></p>
<p><strong> replace(),接收两个参数：第一个参数可以使RegExp对象或者一个字符串,第二个参数可以使一个字符串或者一个函数 </strong><br><figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="comment">//字符替换</span></div><div class="line"><span class="keyword">var</span> text = <span class="string">'cat,bat,sat,fat'</span>;</div><div class="line"><span class="keyword">var</span> res = text.replace(<span class="string">'at'</span>,<span class="string">'ond'</span>);</div><div class="line"><span class="built_in">console</span>.log(res) <span class="comment">// cond bat sat fat</span></div><div class="line"></div><div class="line"><span class="comment">//全部替换</span></div><div class="line"><span class="keyword">var</span> text = <span class="string">'cat,bat,sat,fat'</span>;</div><div class="line"><span class="keyword">var</span> res = text.replace(<span class="regexp">/at/g</span>,<span class="string">'ond'</span>);</div><div class="line"><span class="built_in">console</span>.log(res) <span class="comment">// cond bond,sond fond</span></div></pre></td></tr></table></figure></p>
<figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="comment">//第二个参数函数</span></div><div class="line"><span class="comment">//1.只有一个匹配项时，会接收三个参数：模式匹配的项，位置，原始串</span></div><div class="line"><span class="comment">//2.如果有多个捕获组，传递的参数一次的模式匹配的匹配项1、2、3;最后两个参数依然是 位置 原始串</span></div><div class="line"></div><div class="line"><span class="comment">//替换特殊字符</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">htmlreplace</span>(<span class="params">s</span>)</span>&#123;</div><div class="line">    <span class="keyword">return</span> s.replace(<span class="regexp">/[&lt;&gt;"&amp;]/g</span>,<span class="function"><span class="keyword">function</span>(<span class="params">match,pos,text</span>)</span>&#123;</div><div class="line">        <span class="keyword">switch</span>(match)&#123;</div><div class="line">            <span class="keyword">case</span> <span class="string">"&lt;"</span>:</div><div class="line">                <span class="keyword">return</span> <span class="string">"&amp;lt;"</span>;</div><div class="line">            <span class="keyword">case</span> <span class="string">"&gt;"</span>:</div><div class="line">                <span class="keyword">return</span> <span class="string">"&amp;gt;"</span>;</div><div class="line">            <span class="keyword">case</span> <span class="string">"&amp;"</span>:</div><div class="line">                <span class="keyword">return</span> <span class="string">"&amp;amp"</span>;</div><div class="line">            <span class="keyword">case</span> <span class="string">"\""</span>:</div><div class="line">                <span class="keyword">return</span> <span class="string">"&amp;quot;"</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;);</div><div class="line">&#125;</div><div class="line"><span class="built_in">console</span>.log(htmlreplace(<span class="string">"&lt;p&gt;test&lt;/p&gt;"</span>))</div><div class="line"><span class="comment">//&amp;lt;p&amp;gt;test&amp;lt;/P&amp;gt;</span></div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;周末温习高程三,摘录读书笔记&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;字符方法&quot;&gt;&lt;a href=&quot;#字符方法&quot; class=&quot;headerlink&quot; title=&quot;字符方法&quot;&gt;&lt;/a&gt;字符方法&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;charAt()&lt;/li&gt;
&lt;li&gt;charCodeAt()&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="Javascript" scheme="http://loadingmore.com/categories/Javascript/"/>
    
    
      <category term="javascript" scheme="http://loadingmore.com/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>Python爬虫框架scrapy安装报错解决办法</title>
    <link href="http://loadingmore.com/2017/04/12/Python%E7%88%AC%E8%99%AB%E6%A1%86%E6%9E%B6scrapy%E5%AE%89%E8%A3%85%E6%8A%A5%E9%94%99%E8%A7%A3%E5%86%B3%E5%8A%9E%E6%B3%95/"/>
    <id>http://loadingmore.com/2017/04/12/Python爬虫框架scrapy安装报错解决办法/</id>
    <published>2017-04-12T13:16:23.000Z</published>
    <updated>2017-04-13T12:14:02.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>最近尝试入门python,接触这门语言的目的很明确,就是爬虫,用来爬取数据,我对数据一直抱有神秘感，很感兴趣，所以闲暇之余,开始入门python,它大名鼎鼎的爬虫框架scrapy自然躲不过我的搜索,所以安装测试,于是便开始了这篇踩坑文章</p>
</blockquote>
<a id="more"></a>
<h3 id="报错原因"><a href="#报错原因" class="headerlink" title="报错原因"></a>报错原因</h3><p><img src="http://oiukswkar.bkt.clouddn.com/scrapy-error.png" alt=""><br>我的报错原因就是如图中所示: <strong> error: Unable to find vcvarsall.bat</strong><br>网上也收了很多解决办法,但都是不但可行，对于初学者我来学还是蛮吃力,最终看到有篇帖子说是因为缺少c++一些环境变量引起的,安装Visual Studio 2015可以结局问题,所以网上找了个简版安装包,已经共享在了百度云盘:<br><strong> <a href="http://pan.baidu.com/s/1pLTpCTl" target="_blank" rel="external">我是下载链接</a></strong></p>
<h3 id="安装步骤"><a href="#安装步骤" class="headerlink" title="安装步骤"></a>安装步骤</h3><p>勾选如下几项即可<br><img src="http://oiukswkar.bkt.clouddn.com/visul.png" alt=""></p>
<p>安装完毕后关闭即可;</p>
<p>这个时候在命令行里:<br><strong> pip install scrapy </strong><br>这个时候基本上会顺利的安装完毕了</p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;最近尝试入门python,接触这门语言的目的很明确,就是爬虫,用来爬取数据,我对数据一直抱有神秘感，很感兴趣，所以闲暇之余,开始入门python,它大名鼎鼎的爬虫框架scrapy自然躲不过我的搜索,所以安装测试,于是便开始了这篇踩坑文章&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="Python" scheme="http://loadingmore.com/categories/Python/"/>
    
    
      <category term="python" scheme="http://loadingmore.com/tags/python/"/>
    
      <category term="scrapy" scheme="http://loadingmore.com/tags/scrapy/"/>
    
  </entry>
  
  <entry>
    <title>禁止输入框输入空格</title>
    <link href="http://loadingmore.com/2017/04/11/%E8%BE%93%E5%85%A5%E6%A1%86%E7%A6%81%E6%AD%A2%E8%BE%93%E5%85%A5%E7%A9%BA%E6%A0%BC/"/>
    <id>http://loadingmore.com/2017/04/11/输入框禁止输入空格/</id>
    <published>2017-04-11T11:18:38.000Z</published>
    <updated>2017-04-12T12:35:14.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>做表单验证，输入框经常要做判断,群里也经常看到有朋友问,所以做了下记录,自动过滤空格,</p>
</blockquote>
<h3 id="DEMO"><a href="#DEMO" class="headerlink" title="DEMO"></a>DEMO</h3><p><a href="http://loadingmore.com/demo/src/html/closespace.html">DEMO</a></p>
<a id="more"></a>
<h3 id="实现原理"><a href="#实现原理" class="headerlink" title="实现原理"></a>实现原理</h3><p>说下实现思路吧,其实就是监听输入框输入的类型,进行空格检测,正则一旦检测到空格,立即对当前值输入框进行赋值,赋值为过滤空格后的值<br><figure class="highlight html"><table><tr><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">class</span>=<span class="string">"test"</span>&gt;</span></div></pre></td></tr></table></figure></p>
<h3 id="原生JS"><a href="#原生JS" class="headerlink" title="原生JS"></a>原生JS</h3><figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="keyword">var</span> input = <span class="built_in">document</span>.querySelector(<span class="string">'.test'</span>),</div><div class="line">    reg = <span class="regexp">/\s/</span>;</div><div class="line">input.oninput = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="keyword">if</span>(reg.test(<span class="keyword">this</span>.value))&#123;</div><div class="line">        <span class="comment">//过滤赋值</span></div><div class="line">        input.value = <span class="keyword">this</span>.value.replace(reg,<span class="string">''</span>);</div><div class="line">        <span class="keyword">return</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="JQ版"><a href="#JQ版" class="headerlink" title="JQ版"></a>JQ版</h3><figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="keyword">var</span> input = $(<span class="string">'.test'</span>),</div><div class="line">    reg = <span class="regexp">/\s/</span>;</div><div class="line">input.on(<span class="string">'input'</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="keyword">var</span> val = $(<span class="keyword">this</span>).val();</div><div class="line">    <span class="keyword">if</span>(reg.test(val))&#123;</div><div class="line">        <span class="comment">//过滤赋值</span></div><div class="line">        input.val(val.replace(reg,<span class="string">''</span>));</div><div class="line">        <span class="keyword">return</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="Vue版本"><a href="#Vue版本" class="headerlink" title="Vue版本"></a>Vue版本</h3><figure class="highlight html"><table><tr><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">class</span>=<span class="string">"test"</span> <span class="attr">v-model</span>=<span class="string">"message"</span>&gt;</span></div></pre></td></tr></table></figure>
<p>在Vue里面因为需要实时监听值得变化,所以需要在watch里面监听</p>
<figure class="highlight js"><table><tr><td class="code"><pre><div class="line">watch: &#123;</div><div class="line">    <span class="attr">message</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">        <span class="keyword">const</span> reg= <span class="regexp">/\s/</span>;</div><div class="line">        <span class="keyword">if</span>(reg.test(<span class="keyword">this</span>.message))&#123;</div><div class="line">            <span class="keyword">this</span>.message = <span class="keyword">this</span>.message.replace(reg,<span class="string">''</span>);</div><div class="line">            <span class="keyword">return</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;做表单验证，输入框经常要做判断,群里也经常看到有朋友问,所以做了下记录,自动过滤空格,&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;DEMO&quot;&gt;&lt;a href=&quot;#DEMO&quot; class=&quot;headerlink&quot; title=&quot;DEMO&quot;&gt;&lt;/a&gt;DEMO&lt;/h3&gt;&lt;p&gt;&lt;a href=&quot;http://loadingmore.com/demo/src/html/closespace.html&quot;&gt;DEMO&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Javascript" scheme="http://loadingmore.com/categories/Javascript/"/>
    
    
      <category term="javascript" scheme="http://loadingmore.com/tags/javascript/"/>
    
      <category term="正则" scheme="http://loadingmore.com/tags/%E6%AD%A3%E5%88%99/"/>
    
      <category term="RegExp" scheme="http://loadingmore.com/tags/RegExp/"/>
    
  </entry>
  
  <entry>
    <title>写个正则匹配url参数的字典(方便提取查询参数)</title>
    <link href="http://loadingmore.com/2017/04/04/%E5%86%99%E4%B8%AA%E6%AD%A3%E5%88%99%E5%8C%B9%E9%85%8Durl%E5%8F%82%E6%95%B0%E7%9A%84%E5%AD%97%E5%85%B8-%E6%96%B9%E4%BE%BF%E6%8F%90%E5%8F%96%E6%9F%A5%E8%AF%A2%E5%8F%82%E6%95%B0/"/>
    <id>http://loadingmore.com/2017/04/04/写个正则匹配url参数的字典-方便提取查询参数/</id>
    <published>2017-04-04T14:38:00.000Z</published>
    <updated>2017-04-09T13:50:28.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>项目经常会用到提取地址栏的参数的问题，之前都是随用随写，这不趁着放假，总结了一下</p>
</blockquote>
<a id="more"></a>
<h3 id="我的版本"><a href="#我的版本" class="headerlink" title="我的版本"></a>我的版本</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">getUrlPart</span>(<span class="params">url</span>)</span>&#123;</div><div class="line">    url = url == <span class="literal">null</span> ? <span class="built_in">window</span>.location.href : url;</div><div class="line">    <span class="keyword">var</span> str = url.substring(url.indexOf(<span class="string">'?'</span>)+<span class="number">1</span>);</div><div class="line">    <span class="comment">// 或者 var str = url.split('?')[1];也可以拿到?后面参数</span></div><div class="line">    <span class="keyword">var</span> reg = <span class="regexp">/([^?&amp;=]+)=([^?&amp;=]+)/gi</span>;</div><div class="line">    <span class="keyword">var</span> m,res = &#123;&#125;;</div><div class="line">    <span class="keyword">while</span> (m = reg.exec(str))&#123;</div><div class="line">        res[m[<span class="number">1</span>]] = m[<span class="number">2</span>];</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> res;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="来个高程三的版本"><a href="#来个高程三的版本" class="headerlink" title="来个高程三的版本"></a>来个高程三的版本</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">getQueryStringArgs</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="comment">//取得查询字符串并渠道开头问好</span></div><div class="line">    <span class="keyword">var</span> qs = (location.search.length &gt; <span class="number">0</span> ? location.search.substring(<span class="number">1</span>) : <span class="string">""</span>),</div><div class="line"></div><div class="line">    <span class="comment">//保存数据对象</span></div><div class="line">    args = &#123;&#125;,</div><div class="line"></div><div class="line">    <span class="comment">//取得每一项</span></div><div class="line">    items = qs.length ? qs.split(<span class="string">"&amp;"</span>) : [],</div><div class="line">    item = <span class="literal">null</span>,</div><div class="line">    name = <span class="literal">null</span>,</div><div class="line">    value = <span class="literal">null</span>,</div><div class="line"></div><div class="line">    <span class="comment">//for循环中使用</span></div><div class="line">    i = <span class="number">0</span>,</div><div class="line">    len = items.length;</div><div class="line"></div><div class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;len;i++)&#123;</div><div class="line">        item = items[i].split(<span class="string">"="</span>);</div><div class="line">        name = <span class="built_in">decodeURIComponent</span>(item[<span class="number">0</span>]);</div><div class="line">        value = <span class="built_in">decodeURIComponent</span>(item[<span class="number">1</span>]);</div><div class="line"></div><div class="line">        <span class="keyword">if</span>(name.length)&#123;</div><div class="line">            args[name] = value;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> args;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;项目经常会用到提取地址栏的参数的问题，之前都是随用随写，这不趁着放假，总结了一下&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="Javascript" scheme="http://loadingmore.com/categories/Javascript/"/>
    
    
      <category term="javascript" scheme="http://loadingmore.com/tags/javascript/"/>
    
      <category term="正则" scheme="http://loadingmore.com/tags/%E6%AD%A3%E5%88%99/"/>
    
      <category term="RegExp" scheme="http://loadingmore.com/tags/RegExp/"/>
    
      <category term="查询参数" scheme="http://loadingmore.com/tags/%E6%9F%A5%E8%AF%A2%E5%8F%82%E6%95%B0/"/>
    
  </entry>
  
  <entry>
    <title>写的每条正则记录在册(持续更新)</title>
    <link href="http://loadingmore.com/2017/03/20/%E4%BB%8E%E4%BB%8A%E5%A4%A9%E8%B5%B7%E5%86%99%E7%9A%84%E6%AF%8F%E6%9D%A1%E6%AD%A3%E5%88%99%E9%83%BD%E8%AE%B0%E5%BD%95%E5%9C%A8%E5%86%8C/"/>
    <id>http://loadingmore.com/2017/03/20/从今天起写的每条正则都记录在册/</id>
    <published>2017-03-20T14:45:12.000Z</published>
    <updated>2017-06-10T02:50:12.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>正则这门语言实在是太强大,用的好可以大大减少工作量,大多时候会写很多重复类似的正则，处于爱护脑细胞的考虑，我决定从今往后的所写的正则,都记录下来.</p>
</blockquote>
<a id="more"></a>
<h3 id="不能纯字母数字-必须包含两者"><a href="#不能纯字母数字-必须包含两者" class="headerlink" title="不能纯字母数字 必须包含两者"></a>不能纯字母数字 必须包含两者</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line"><span class="keyword">var</span> reg1 = <span class="regexp">/^(?=.*?[0-9])(?=.*?[a-z])[0-9a-z]+$/</span>;</div><div class="line"><span class="keyword">var</span> reg2 = <span class="regexp">/(?!^[0-9]+$)(?!^[a-z]+$)^[0-9a-z]+$/</span>;</div></pre></td></tr></table></figure>
<h3 id="不能纯字母数字-必须包含三者-…-发散下思维判断密码强弱的表达式"><a href="#不能纯字母数字-必须包含三者-…-发散下思维判断密码强弱的表达式" class="headerlink" title="不能纯字母数字  必须包含三者 (….发散下思维判断密码强弱的表达式)"></a>不能纯字母数字  必须包含三者 (….发散下思维判断密码强弱的表达式)</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line"><span class="keyword">var</span> reg3 = <span class="regexp">/(?!^[0-9]+$)(?!^[a-z]+$)(?!^[_\-@&amp;=]]+$)^[0-9a-z_\-@&amp;=]+$/</span>;</div><div class="line"><span class="keyword">var</span> reg4 = <span class="regexp">/^(?=.*?[0-9])(?=.*?[a-z])(?=.*?[_\-@&amp;=])[0-9a-z_\-@&amp;=]+$/</span>;</div></pre></td></tr></table></figure>
<h3 id="药品库规格-药品规格-测试用例"><a href="#药品库规格-药品规格-测试用例" class="headerlink" title="药品库规格 药品规格 测试用例"></a>药品库规格 药品规格 测试用例</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line"><span class="comment">//ex:匹配如下</span></div><div class="line"><span class="comment">//12*13  12mg*3 12mg*3 片(盒|粒)</span></div><div class="line"><span class="comment">//0.12*12 7片*6盒</span></div><div class="line"><span class="keyword">var</span> reg = <span class="regexp">/^(([1-9]+\d*(\.\d*)?)|(^0\.[1-9]+\d*))([a-zA-Zμ]*|[\u4e00-\u9fa5]*)*?\*([1-9]+\d*)[\u4e00-\u9fa5]*$/</span>;</div></pre></td></tr></table></figure>
<h3 id="判断文件类型"><a href="#判断文件类型" class="headerlink" title="判断文件类型"></a>判断文件类型</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line"><span class="keyword">var</span> reg6 = <span class="regexp">/\.(doc|png|image)$/</span>;<span class="comment">//等等 需要什么文件可以自动添加</span></div></pre></td></tr></table></figure>
<h3 id="排除指定字符"><a href="#排除指定字符" class="headerlink" title="排除指定字符"></a>排除指定字符</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line"><span class="comment">//找出其中 包含 p 但不包含 ph 的所有单词，即</span></div><div class="line"><span class="comment">//[ 'python', 'javascript', 'jsonp' ]</span></div><div class="line"><span class="keyword">var</span> web_development = <span class="string">"python php ruby javascript jsonp perhapsphpisoutdated"</span>;</div><div class="line"><span class="keyword">var</span> reg = <span class="regexp">/\b(?=\w*p)(?!\w*ph)\w+\b/g</span></div></pre></td></tr></table></figure>
<h3 id="排除结尾不以什么字符结尾"><a href="#排除结尾不以什么字符结尾" class="headerlink" title="排除结尾不以什么字符结尾"></a>排除结尾不以什么字符结尾</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line"><span class="comment">//不以is结尾的单词</span></div><div class="line"><span class="keyword">var</span> str =  <span class="string">`existing</span></div><div class="line">            pessimist</div><div class="line">            this</div><div class="line">            is</div><div class="line">            the</div><div class="line">            `;</div><div class="line"><span class="keyword">var</span> reg = <span class="regexp">/\b\w+[^is]$\b/gm</span>;<span class="comment">//跨行</span></div></pre></td></tr></table></figure>
<h3 id="检测是否出现重复字符2个及以上-2017-4-6"><a href="#检测是否出现重复字符2个及以上-2017-4-6" class="headerlink" title="检测是否出现重复字符2个及以上(2017/4/6)"></a>检测是否出现重复字符2个及以上(2017/4/6)</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">get</span>(<span class="params">s</span>)</span>&#123;</div><div class="line">    <span class="comment">// 例如aabcdf abbbdfsdf</span></div><div class="line">    <span class="keyword">var</span> reg = <span class="regexp">/(.)\1+/g</span>;</div><div class="line">    <span class="comment">//排序</span></div><div class="line">    s = s.split(<span class="string">''</span>);</div><div class="line">    s.sort();</div><div class="line">    s = s.join(<span class="string">''</span>);</div><div class="line">    <span class="comment">//校验</span></div><div class="line">    <span class="keyword">if</span>(reg.test(s))&#123;</div><div class="line">        <span class="built_in">console</span>.log(<span class="string">"哎呀,碰到了重复字符"</span>)</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="keyword">var</span> str = <span class="string">'asfawertyha'</span>;</div><div class="line">get(str);</div></pre></td></tr></table></figure>
<h3 id="字符去重-2017-4-10"><a href="#字符去重-2017-4-10" class="headerlink" title="字符去重(2017/4/10)"></a>字符去重(2017/4/10)</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">get</span>(<span class="params">s</span>)</span>&#123;</div><div class="line">    <span class="comment">//排序</span></div><div class="line">    s = s.split(<span class="string">''</span>);</div><div class="line">    s.sort();</div><div class="line">    s = s.join(<span class="string">''</span>);</div><div class="line">    <span class="comment">//该正则与上一条有区别</span></div><div class="line">    <span class="keyword">var</span> reg = <span class="regexp">/(.)\1*/g</span>;</div><div class="line">    <span class="keyword">var</span> tt = <span class="string">''</span>;<span class="comment">//存储新字符串</span></div><div class="line">    <span class="keyword">var</span> m;<span class="comment">//变量</span></div><div class="line">    <span class="keyword">while</span> (m = reg.exec(s))&#123;</div><div class="line">        tt += m[<span class="number">1</span>];<span class="comment">//循环去重</span></div><div class="line">    &#125;</div><div class="line">    <span class="comment">//返回去重后的字符</span></div><div class="line">    <span class="keyword">return</span> tt;</div><div class="line">&#125;</div><div class="line"><span class="keyword">var</span> str = <span class="string">'asfaasdwesdfrtyha'</span>;</div><div class="line">get(str);</div><div class="line"><span class="comment">//adefhrstwy</span></div></pre></td></tr></table></figure>
<h3 id="匹配1000-65535区间的数字-不包含9999-2017-5-4"><a href="#匹配1000-65535区间的数字-不包含9999-2017-5-4" class="headerlink" title="匹配1000-65535区间的数字(不包含9999)(2017/5/4)"></a>匹配1000-65535区间的数字(不包含9999)(2017/5/4)</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line"><span class="keyword">var</span> reg = <span class="regexp">/^(?!9999)([1-9]\d&#123;3&#125;|[1-5]\d&#123;4&#125;|6[0-5]&#123;2&#125;[0-3][0-5])$/</span>;</div></pre></td></tr></table></figure>
<h3 id="链接巧妙取纯数字-2017-5-4"><a href="#链接巧妙取纯数字-2017-5-4" class="headerlink" title="链接巧妙取纯数字(2017/5/4)"></a>链接巧妙取纯数字(2017/5/4)</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line"><span class="keyword">var</span> reg = <span class="regexp">/\b\d+\b/</span>;</div><div class="line"><span class="comment">//test 尾数后面的纯数字，不出意外都可以取出来</span></div><div class="line">http:<span class="comment">//www.66play.com/Home/share/match/id/39455  </span></div><div class="line">http:<span class="comment">//www.66play.com/match-detail-151951</span></div><div class="line">http:<span class="comment">//www.66play.com/Home/share/match/id/148853?</span></div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;正则这门语言实在是太强大,用的好可以大大减少工作量,大多时候会写很多重复类似的正则，处于爱护脑细胞的考虑，我决定从今往后的所写的正则,都记录下来.&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="Javascript" scheme="http://loadingmore.com/categories/Javascript/"/>
    
    
      <category term="javascript" scheme="http://loadingmore.com/tags/javascript/"/>
    
      <category term="正则" scheme="http://loadingmore.com/tags/%E6%AD%A3%E5%88%99/"/>
    
      <category term="RegExp" scheme="http://loadingmore.com/tags/RegExp/"/>
    
  </entry>
  
  <entry>
    <title>阿拉伯数字千分位用逗号分隔</title>
    <link href="http://loadingmore.com/2017/03/18/%E9%98%BF%E6%8B%89%E4%BC%AF%E6%95%B0%E5%AD%97%E5%8D%83%E5%88%86%E4%BD%8D%E7%94%A8%E9%80%97%E5%8F%B7%E5%88%86%E9%9A%94/"/>
    <id>http://loadingmore.com/2017/03/18/阿拉伯数字千分位用逗号分隔/</id>
    <published>2017-03-18T12:50:30.000Z</published>
    <updated>2017-06-10T02:54:38.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>上回说到字符正向加逗号或者其他字符,主要用户银行卡号等场景，而且封装成了通用代码;这回准备写点关于金钱的东西,今天写点不一样的。</p>
</blockquote>
<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>我经常在上市公司年报上看到这样的字眼:<strong> 本公司首次向社会公众发行人民币普通股（A 股）10,720,000.00 股。募集资金总额为人民币 239,270,400.00 元.</strong> 千分位加逗号,今天咱们用正则实现这样的效果<br><a id="more"></a></p>
<h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line"><span class="comment">/*</span></div><div class="line">*@param s 字符</div><div class="line">*/</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">setMoney</span>(<span class="params">s</span>)</span>&#123;</div><div class="line">    <span class="keyword">if</span>(s.length &lt; <span class="number">3</span>)&#123;</div><div class="line">        <span class="keyword">return</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="comment">//判断是否有小数位 如果有,需要多加判断</span></div><div class="line">    <span class="keyword">if</span>(s.indexOf(<span class="string">'.'</span>) &gt; <span class="number">-1</span>)&#123;</div><div class="line">        <span class="keyword">var</span> index = s.indexOf(<span class="string">'.'</span>);</div><div class="line">        <span class="keyword">var</span> last = s.substr(index);</div><div class="line">        s = s.substr(<span class="number">0</span>,index).replace(<span class="regexp">/\B(?=(\d&#123;3&#125;)+$)/g</span>,<span class="string">','</span>);</div><div class="line">        s = s + last;</div><div class="line">        <span class="keyword">return</span> s;</div><div class="line">    &#125;<span class="keyword">else</span>&#123;</div><div class="line">        <span class="comment">//没有小数的就直接返回</span></div><div class="line">        <span class="keyword">return</span> s.replace(<span class="regexp">/\B(?=(\d&#123;3&#125;)+$)/g</span>,<span class="string">','</span>)</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="comment">//测试</span></div><div class="line"><span class="keyword">var</span> str = <span class="string">'123123123123.56'</span>;</div><div class="line"><span class="built_in">console</span>.log(setMoney(str))</div><div class="line"><span class="comment">//123,123,123,123.56</span></div></pre></td></tr></table></figure>
<h2 id="要不封装一下？"><a href="#要不封装一下？" class="headerlink" title="要不封装一下？"></a>要不封装一下？</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line">*   @param &#123;String&#125; s 字符</div><div class="line">*   @param &#123;String&#125; t 字符类型 , . 。等等</div><div class="line">*   @param &#123;Number&#125; n 间隔位数</div><div class="line">*/</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">setMoney</span>(<span class="params">s,t,n</span>)</span>&#123;</div><div class="line">    <span class="keyword">if</span>(s.length &lt; <span class="number">3</span>)&#123;</div><div class="line">        <span class="keyword">return</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="comment">//判断是否有小数位 如果有,需要多加判断</span></div><div class="line">    <span class="keyword">if</span>(s.indexOf(<span class="string">'.'</span>) &gt; <span class="number">-1</span>)&#123;</div><div class="line">        <span class="keyword">var</span> index = s.indexOf(<span class="string">'.'</span>);</div><div class="line">        <span class="keyword">var</span> last = s.substr(index);</div><div class="line">        <span class="keyword">var</span> reg = <span class="keyword">new</span> <span class="built_in">RegExp</span>(<span class="string">'\\B(?=(\\d&#123;'</span>+n+<span class="string">'&#125;)+$)'</span>,<span class="string">'g'</span>);</div><div class="line">        s = s.substr(<span class="number">0</span>,index).replace(reg,<span class="string">''</span>+t+<span class="string">''</span>);</div><div class="line">        s = s + last;</div><div class="line">        <span class="keyword">return</span> s;</div><div class="line">    &#125;<span class="keyword">else</span>&#123;</div><div class="line">        <span class="comment">//没有小数的就直接返回</span></div><div class="line">        <span class="keyword">return</span> s.replace(reg,<span class="string">''</span>+t+<span class="string">''</span>)</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="comment">//测试</span></div><div class="line"><span class="built_in">console</span>.log(setMoney2(str,<span class="string">','</span>,<span class="number">5</span>))</div><div class="line"><span class="comment">//12,31231,23123.56</span></div><div class="line"><span class="built_in">console</span>.log(setMoney2(str,<span class="string">','</span>,<span class="number">3</span>))</div><div class="line"><span class="comment">//123,123,123,123.56</span></div></pre></td></tr></table></figure>
<h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>今天就先写到这,最近一直在研究正则,所以稍微总结了一些案例,后续可能还是以js为主,正则可能相对会减少发表,过几天写一个日常用的正则案例的博客,就正则这东西,几天不用就会遗忘,保持持续更新…以上代码都有做测试,如果有什么疑问,可以与我联系 biyuqiwan@163.com</p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;上回说到字符正向加逗号或者其他字符,主要用户银行卡号等场景，而且封装成了通用代码;这回准备写点关于金钱的东西,今天写点不一样的。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;我经常在上市公司年报上看到这样的字眼:&lt;strong&gt; 本公司首次向社会公众发行人民币普通股（A 股）10,720,000.00 股。募集资金总额为人民币 239,270,400.00 元.&lt;/strong&gt; 千分位加逗号,今天咱们用正则实现这样的效果&lt;br&gt;
    
    </summary>
    
      <category term="Javascript" scheme="http://loadingmore.com/categories/Javascript/"/>
    
    
      <category term="javascript" scheme="http://loadingmore.com/tags/javascript/"/>
    
      <category term="正则" scheme="http://loadingmore.com/tags/%E6%AD%A3%E5%88%99/"/>
    
      <category term="RegExp" scheme="http://loadingmore.com/tags/RegExp/"/>
    
  </entry>
  
</feed>
